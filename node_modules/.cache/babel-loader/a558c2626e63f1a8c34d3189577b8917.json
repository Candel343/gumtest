{"ast":null,"code":"import _slicedToArray from\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{PublicKey,SystemProgram,TransactionInstruction}from\"@solana/web3.js\";import{Token}from\"@solana/spl-token\";import{SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,TOKEN_PROGRAM_ID}from\"@oyster/common\";import{sha256}from\"js-sha256\";import BN from'bn.js';import*as bs58 from\"bs58\";import{getCandyConfig,getCandyMachineAddress,getCandyMachine,getCreatorTokenAccount,getEdition,getEditionMarkerPda,getMintInfo}from\"./accounts\";import{CANDY_MACHINE_ID,GUMDROP_DISTRIBUTOR_ID}from\"./ids\";import{MerkleTree}from\"./merkleTree\";var csvStringToArray=function csvStringToArray(strData){var objPattern=new RegExp(\"(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|([^\\\\,\\\\r\\\\n]*))\",\"gi\");var arrMatches=null;var arrData=[[]];while(arrMatches=objPattern.exec(strData)){if(arrMatches[1].length&&arrMatches[1]!==\",\")arrData.push([]);arrData[arrData.length-1].push(arrMatches[2]?arrMatches[2].replace(new RegExp(\"\\\"\\\"\",\"g\"),\"\\\"\"):arrMatches[3]);}return arrData;};export var parseClaimants=function parseClaimants(input,filename,method){var extension=filename.match(/\\.[0-9a-z]+$/i);if(extension===null){throw new Error(\"Could not parse file extension from \".concat(filename));}switch(extension[0]){case\".csv\":{var arr=csvStringToArray(input);// TODO: more robust\nvar search;if(method===\"aws-sms\"){search=\"phone number\";}else if(method===\"aws-email\"){search=\"email\";}else{throw new Error(\"Cannot parse csv for \".concat(method));}var foundIdx=arr[0].findIndex(function(s){return s.includes(search);});if(foundIdx===-1)throw new Error(\"Could not find \".concat(search,\" index\"));var numbers=new Set(arr.slice(1).filter(function(arr){return arr[foundIdx].length>0;}).map(function(arr){return arr[foundIdx];}));return _toConsumableArray(numbers).map(function(n,idx){return{handle:n,amount:1,edition:idx};});}case\".json\":{var json=JSON.parse(input);return json.map(function(obj){return{handle:obj.handle,amount:obj.amount,edition:obj.edition,url:obj.url};});}default:{throw new Error(\"Cannot parse file format \".concat(extension,\" from \").concat(filename));}}};var explorerUrlFor=function explorerUrlFor(env,key){return\"https://explorer.solana.com/address/\".concat(key,\"?cluster=\").concat(env);};export var dropInfoFor=function dropInfoFor(env,integration,tokenMint,candyConfig,masterMint){switch(integration){case\"transfer\":return{type:\"Token\",meta:explorerUrlFor(env,tokenMint)};case\"candy\":return{type:\"Candy\",meta:explorerUrlFor(env,candyConfig)};case\"edition\":return{type:\"Edition\",meta:explorerUrlFor(env,masterMint)};default:throw new Error(\"Unknown claim integration method \".concat(integration));}};export var validateTransferClaims=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,walletKey,claimants,mintStr){var total,mint,source;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:claimants.forEach(function(c,idx){if(!c.handle)throw new Error(\"Claimant \".concat(idx,\" doesn't have handle\"));if(!c.amount)throw new Error(\"Claimant \".concat(idx,\" doesn't have amount\"));if(c.amount===0)throw new Error(\"Claimant \".concat(idx,\" amount is 0\"));});total=claimants.reduce(function(acc,c){return acc+c.amount;},0);_context.next=4;return getMintInfo(connection,mintStr);case 4:mint=_context.sent;_context.next=7;return getCreatorTokenAccount(walletKey,connection,mint.key,total);case 7:source=_context.sent;return _context.abrupt(\"return\",{total:total,mint:mint,source:source});case 9:case\"end\":return _context.stop();}}},_callee);}));return function validateTransferClaims(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var validateCandyClaims=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,walletKey,claimants,candyConfig,candyUuid){var total,configKey,_yield$getCandyMachin,_yield$getCandyMachin2,candyMachineKey,candyMachine,remaining;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:claimants.forEach(function(c,idx){if(!c.handle)throw new Error(\"Claimant \".concat(idx,\" doesn't have handle\"));if(!c.amount)throw new Error(\"Claimant \".concat(idx,\" doesn't have amount\"));if(c.amount===0)throw new Error(\"Claimant \".concat(idx,\" amount is 0\"));});total=claimants.reduce(function(acc,c){return acc+c.amount;},0);_context2.next=4;return getCandyConfig(connection,candyConfig);case 4:configKey=_context2.sent;_context2.next=7;return getCandyMachineAddress(configKey,candyUuid);case 7:_yield$getCandyMachin=_context2.sent;_yield$getCandyMachin2=_slicedToArray(_yield$getCandyMachin,1);candyMachineKey=_yield$getCandyMachin2[0];_context2.next=12;return getCandyMachine(connection,candyMachineKey);case 12:candyMachine=_context2.sent;remaining=candyMachine.data.itemsAvailable.toNumber()-candyMachine.itemsRedeemed.toNumber();if(!isNaN(remaining)){_context2.next=16;break;}throw new Error(\"Could not calculate how many candy machine items are remaining\");case 16:if(!(remaining<total)){_context2.next=18;break;}throw new Error(\"Distributor is allocated more mints (\".concat(total,\") \")+\"than the candy machine has remaining (\".concat(remaining,\")\"));case 18:if(candyMachine.authority.equals(walletKey)){_context2.next=20;break;}throw new Error(\"Candy machine authority does not match wallet public key\");case 20:return _context2.abrupt(\"return\",{total:total,config:configKey,uuid:candyUuid,candyMachineKey:candyMachineKey});case 21:case\"end\":return _context2.stop();}}},_callee2);}));return function validateCandyClaims(_x5,_x6,_x7,_x8,_x9){return _ref2.apply(this,arguments);};}();var getOffsetFromStart=function getOffsetFromStart(edition){return edition.mod(new BN(31*8));};var getIndex=function getIndex(offsetFromStart){return offsetFromStart.div(new BN(8));};var getOffsetFromRight=function getOffsetFromRight(offsetFromStart){return new BN(7).sub(offsetFromStart.mod(new BN(8)));};var getIndexAndMask=function getIndexAndMask(edition){var offsetFromStart=getOffsetFromStart(edition);return{index:getIndex(offsetFromStart).toNumber(),mask:new BN(1).shln(getOffsetFromRight(offsetFromStart).toNumber()).toNumber()};};var editionTaken=function editionTaken(marker,edition){var m=getIndexAndMask(edition);return(marker[m.index]&m.mask)!==0;};var setEditionTaken=function setEditionTaken(marker,edition){var m=getIndexAndMask(edition);marker[m.index]=marker[m.index]|m.mask;};export var validateEditionClaims=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,walletKey,claimants,masterMintStr){var total,masterMint,masterTokenAccount,masterEditionKey,masterEdition,currentSupply,maxSupply,editions,editionMarkers,_loop,idx;return _regeneratorRuntime.wrap(function _callee3$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:claimants.forEach(function(c,idx){if(!c.handle)throw new Error(\"Claimant \".concat(idx,\" doesn't have handle\"));if(c.amount!==1){throw new Error(\"Claimant \".concat(idx,\" has amount \").concat(c.amount,\". Expected 1 for edition gumdrop\"));}});total=claimants.reduce(function(acc,c){return acc+c.amount;},0);_context4.next=4;return getMintInfo(connection,masterMintStr);case 4:masterMint=_context4.sent;_context4.next=7;return getCreatorTokenAccount(walletKey,connection,masterMint.key,1// just check that the creator has the master mint\n);case 7:masterTokenAccount=_context4.sent;_context4.next=10;return getEdition(masterMint.key);case 10:masterEditionKey=_context4.sent;_context4.next=13;return connection.getAccountInfo(masterEditionKey);case 13:masterEdition=_context4.sent;if(!(masterEdition===null)){_context4.next=16;break;}throw new Error(\"Could not fetch master edition\");case 16:console.log(\"Master edition\",masterEdition);// maxSupply is an option, 9 bytes, first is 0 means is none\ncurrentSupply=new BN(masterEdition.data.slice(1,1+8),8,\"le\").toNumber();if(masterEdition.data[9]===0){maxSupply=null;}else{maxSupply=new BN(masterEdition.data.slice(10,10+8),8,\"le\").toNumber();}console.log(\"Max supply\",maxSupply);console.log(\"Current supply\",currentSupply);if(!(maxSupply!==null&&maxSupply<total)){_context4.next=23;break;}throw new Error(\"Distributor is allocated more editions (\".concat(total,\") \")+\"than the master has total (\".concat(maxSupply,\")\"));case 23:// Whether an edition has been claimed is a single bit in a paginated account\n// (pda off of master mint). The following code does some sanity checks\n// around max supply and internally whether the distribution list has\n// duplicate editions, and also checks if the editions were already taken on\n// chain.\n//\n// There is a race condition since the authority to mint is still currently\n// the wallet but it seems like a user error to have other editions being\n// minted while a gumdrop is being created\neditions={};editionMarkers=[];_loop=/*#__PURE__*/_regeneratorRuntime.mark(function _loop(idx){var c,edition,markerKey,markerData,markerAcc;return _regeneratorRuntime.wrap(function _loop$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:c=claimants[idx];if(!(c.edition===undefined)){_context3.next=3;break;}throw new Error(\"Claimant \".concat(idx,\" doesn't have edition\"));case 3:if(!(c.edition<=0)){_context3.next=5;break;}throw new Error(\"Claimant \".concat(idx,\" assigned invalid edition \").concat(c.edition));case 5:if(!(maxSupply!==null&&c.edition>maxSupply)){_context3.next=7;break;}throw new Error(\"Claimant \".concat(idx,\" assigned edition \").concat(c.edition,\" which is beyond the max supply\"));case 7:if(!(c.edition in editions)){_context3.next=9;break;}throw new Error(\"Claimant \".concat(idx,\" and \").concat(editions[c.edition],\" are both assigned to edition \").concat(c.edition));case 9:edition=new BN(c.edition);_context3.next=12;return getEditionMarkerPda(masterMint.key,edition);case 12:markerKey=_context3.sent;markerData=editionMarkers.find(function(pm){return pm[0].equals(markerKey);});if(!(markerData===undefined)){_context3.next=20;break;}_context3.next=17;return connection.getAccountInfo(markerKey);case 17:markerAcc=_context3.sent;if(markerAcc===null){editionMarkers.push([markerKey,Array(31)]);}else{editionMarkers.push([markerKey,_toConsumableArray(markerAcc.data.slice(1,32))]);}markerData=editionMarkers[editionMarkers.length-1];case 20:if(!(markerData===undefined)){_context3.next=22;break;}throw new Error(\"Internal Error: Edition marker info still undefined \".concat(c.edition));case 22:if(!editionTaken(markerData[1],edition)){_context3.next=24;break;}throw new Error(\"Claimant \".concat(idx,\" is assigned to edition \").concat(c.edition,\" which is already taken\"));case 24:setEditionTaken(markerData[1],edition);editions[c.edition]=idx;case 26:case\"end\":return _context3.stop();}}},_loop);});idx=0;case 27:if(!(idx<claimants.length)){_context4.next=32;break;}return _context4.delegateYield(_loop(idx),\"t0\",29);case 29:++idx;_context4.next=27;break;case 32:return _context4.abrupt(\"return\",{total:total,masterMint:masterMint,masterTokenAccount:masterTokenAccount});case 33:case\"end\":return _context4.stop();}}},_callee3);}));return function validateEditionClaims(_x10,_x11,_x12,_x13){return _ref3.apply(this,arguments);};}();export var chunk=function chunk(arr,len){var chunks=[];var n=arr.length;var i=0;while(i<n){chunks.push(arr.slice(i,i+=len));}return chunks;};export var buildGumdrop=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection,walletKey,needsPin,claimIntegration,host,baseKey,temporalSigner,claimants,claimInfo){var extraParams,leafs,idx,claimant,seeds,_yield$PublicKey$find,_yield$PublicKey$find2,claimantPda,extra,tree,root,_yield$PublicKey$find3,_yield$PublicKey$find4,distributor,dbump,_idx,proof,verified,_claimant,params,query,instructions,_yield$PublicKey$find5,_yield$PublicKey$find6,distributorWalletKey,_yield$PublicKey$find7,_yield$PublicKey$find8,distributorTokenKey,_args5=arguments;return _regeneratorRuntime.wrap(function _callee4$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:extraParams=_args5.length>9&&_args5[9]!==undefined?_args5[9]:[];leafs=[];idx=0;case 3:if(!(idx<claimants.length)){_context5.next=27;break;}claimant=claimants[idx];if(needsPin){_context5.next=15;break;}_context5.prev=6;claimant.secret=new PublicKey(claimant.handle);_context5.next=13;break;case 10:_context5.prev=10;_context5.t0=_context5[\"catch\"](6);throw new Error(\"Invalid claimant wallet handle \".concat(_context5.t0));case 13:_context5.next=22;break;case 15:seeds=[claimant.seed.toBuffer()].concat(_toConsumableArray(chunk(Buffer.from(claimant.handle),32)),[Buffer.from(claimant.pin.toArray(\"le\",4))]);_context5.next=18;return PublicKey.findProgramAddress(seeds.map(function(s){return s.slice(0,32);}),GUMDROP_DISTRIBUTOR_ID);case 18:_yield$PublicKey$find=_context5.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,1);claimantPda=_yield$PublicKey$find2[0];claimant.secret=claimantPda;case 22:// TODO: get this clarified with jordan... we can either just assign some\n// range of editions to a user or give them an amount and just keep a\n// counter on the distributor... the latter is much less work but we lose\n// the ability to use gumdrop for auction house winnings and such?\nextra=claimIntegration===\"edition\"?_toConsumableArray(new BN(claimant.edition).toArray(\"le\",8)):[];leafs.push(Buffer.from([].concat(_toConsumableArray(new BN(idx).toArray(\"le\",8)),_toConsumableArray(claimant.secret.toBuffer()),_toConsumableArray(claimant.seed.toBuffer()),_toConsumableArray(new BN(claimant.amount).toArray(\"le\",8)),_toConsumableArray(extra))));case 24:++idx;_context5.next=3;break;case 27:tree=new MerkleTree(leafs);root=tree.getRoot();_context5.next=31;return PublicKey.findProgramAddress([Buffer.from(\"MerkleDistributor\"),baseKey.toBuffer()],GUMDROP_DISTRIBUTOR_ID);case 31:_yield$PublicKey$find3=_context5.sent;_yield$PublicKey$find4=_slicedToArray(_yield$PublicKey$find3,2);distributor=_yield$PublicKey$find4[0];dbump=_yield$PublicKey$find4[1];_idx=0;case 36:if(!(_idx<claimants.length)){_context5.next=50;break;}proof=tree.getProof(_idx);verified=tree.verifyProof(_idx,proof,root);if(verified){_context5.next=41;break;}throw new Error(\"Gumdrop merkle tree verification failed\");case 41:_claimant=claimants[_idx];params=[\"distributor=\".concat(distributor),\"handle=\".concat(encodeURIComponent(_claimant.handle)),\"amount=\".concat(_claimant.amount),\"index=\".concat(_idx),\"proof=\".concat(proof.map(function(b){return bs58.encode(b);}))].concat(_toConsumableArray(extraParams));if(needsPin){params.push(\"pin=\".concat(_claimant.pin.toNumber()));}else{params.push(\"pin=NA\");}if(claimIntegration===\"transfer\"){params.push(\"tokenAcc=\".concat(claimInfo.source));}else if(claimIntegration===\"candy\"){params.push(\"config=\".concat(claimInfo.config));params.push(\"uuid=\".concat(claimInfo.uuid));}else{params.push(\"master=\".concat(claimInfo.masterMint.key));params.push(\"edition=\".concat(_claimant.edition));}query=params.join(\"&\");_claimant.url=\"\".concat(host,\"/claim?\").concat(query);case 47:++_idx;_context5.next=36;break;case 50:// initial merkle-distributor state\ninstructions=Array();instructions.push(new TransactionInstruction({programId:GUMDROP_DISTRIBUTOR_ID,keys:[{pubkey:baseKey,isSigner:true,isWritable:false},{pubkey:distributor,isSigner:false,isWritable:true},{pubkey:walletKey,isSigner:true,isWritable:false},{pubkey:SystemProgram.programId,isSigner:false,isWritable:false}],data:Buffer.from([].concat(_toConsumableArray(Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0,8)),_toConsumableArray(new BN(dbump).toArray(\"le\",1)),_toConsumableArray(root),_toConsumableArray(temporalSigner.toBuffer())))}));if(!(claimIntegration===\"transfer\")){_context5.next=56;break;}instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID,claimInfo.source,distributor,walletKey,[],claimInfo.total));_context5.next=73;break;case 56:if(!(claimIntegration===\"candy\")){_context5.next=65;break;}_context5.next=59;return PublicKey.findProgramAddress([Buffer.from(\"Wallet\"),distributor.toBuffer()],GUMDROP_DISTRIBUTOR_ID);case 59:_yield$PublicKey$find5=_context5.sent;_yield$PublicKey$find6=_slicedToArray(_yield$PublicKey$find5,1);distributorWalletKey=_yield$PublicKey$find6[0];instructions.push(new TransactionInstruction({programId:CANDY_MACHINE_ID,keys:[{pubkey:claimInfo.candyMachineKey,isSigner:false,isWritable:true},{pubkey:walletKey,isSigner:true,isWritable:false}],data:Buffer.from([].concat(_toConsumableArray(Buffer.from(sha256.digest(\"global:update_authority\")).slice(0,8)),_toConsumableArray(new BN(1).toArray(\"le\",1)),_toConsumableArray(distributorWalletKey.toBuffer())))}));_context5.next=73;break;case 65:if(!(claimIntegration===\"edition\")){_context5.next=73;break;}_context5.next=68;return PublicKey.findProgramAddress([distributor.toBuffer(),TOKEN_PROGRAM_ID.toBuffer(),claimInfo.masterMint.key.toBuffer()],SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);case 68:_yield$PublicKey$find7=_context5.sent;_yield$PublicKey$find8=_slicedToArray(_yield$PublicKey$find7,1);distributorTokenKey=_yield$PublicKey$find8[0];instructions.push(Token.createAssociatedTokenAccountInstruction(SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,TOKEN_PROGRAM_ID,claimInfo.masterMint.key,distributorTokenKey,distributor,walletKey));instructions.push(Token.createTransferInstruction(TOKEN_PROGRAM_ID,claimInfo.masterTokenAccount,distributorTokenKey,walletKey,[],1));case 73:return _context5.abrupt(\"return\",instructions);case 74:case\"end\":return _context5.stop();}}},_callee4,null,[[6,10]]);}));return function buildGumdrop(_x14,_x15,_x16,_x17,_x18,_x19,_x20,_x21,_x22){return _ref4.apply(this,arguments);};}();export var closeGumdrop=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection,walletKey,base,claimMethod,transferMint,candyConfig,candyUuid,masterMint){var _yield$PublicKey$find9,_yield$PublicKey$find10,distributorKey,dbump,_yield$PublicKey$find11,_yield$PublicKey$find12,distributorWalletKey,wbump,extraKeys,instructions,mint,source,configKey,_yield$getCandyMachin3,_yield$getCandyMachin4,candyMachineKey,masterMintKey,_yield$PublicKey$find13,_yield$PublicKey$find14,distributorTokenKey,_yield$PublicKey$find15,_yield$PublicKey$find16,walletTokenKey;return _regeneratorRuntime.wrap(function _callee5$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return PublicKey.findProgramAddress([Buffer.from(\"MerkleDistributor\"),base.publicKey.toBuffer()],GUMDROP_DISTRIBUTOR_ID);case 2:_yield$PublicKey$find9=_context6.sent;_yield$PublicKey$find10=_slicedToArray(_yield$PublicKey$find9,2);distributorKey=_yield$PublicKey$find10[0];dbump=_yield$PublicKey$find10[1];_context6.next=8;return PublicKey.findProgramAddress([Buffer.from(\"Wallet\"),distributorKey.toBuffer()],GUMDROP_DISTRIBUTOR_ID);case 8:_yield$PublicKey$find11=_context6.sent;_yield$PublicKey$find12=_slicedToArray(_yield$PublicKey$find11,2);distributorWalletKey=_yield$PublicKey$find12[0];wbump=_yield$PublicKey$find12[1];instructions=Array();if(!(claimMethod===\"transfer\")){_context6.next=21;break;}_context6.next=16;return getMintInfo(connection,transferMint);case 16:mint=_context6.sent;_context6.next=19;return getCreatorTokenAccount(walletKey,connection,mint.key,0);case 19:source=_context6.sent;// distributor is about to be closed anyway so this is redundant but...\ninstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID,source,walletKey,[]));case 21:if(!(claimMethod===\"candy\")){_context6.next=33;break;}_context6.next=24;return getCandyConfig(connection,candyConfig);case 24:configKey=_context6.sent;_context6.next=27;return getCandyMachineAddress(configKey,candyUuid);case 27:_yield$getCandyMachin3=_context6.sent;_yield$getCandyMachin4=_slicedToArray(_yield$getCandyMachin3,1);candyMachineKey=_yield$getCandyMachin4[0];extraKeys=[{pubkey:candyMachineKey,isSigner:false,isWritable:true},{pubkey:CANDY_MACHINE_ID,isSigner:false,isWritable:false}];_context6.next=34;break;case 33:extraKeys=[];case 34:if(!(claimMethod===\"edition\")){_context6.next=53;break;}_context6.prev=35;masterMintKey=new PublicKey(masterMint);_context6.next=42;break;case 39:_context6.prev=39;_context6.t0=_context6[\"catch\"](35);throw new Error(\"Invalid mint key \".concat(_context6.t0));case 42:_context6.next=44;return PublicKey.findProgramAddress([distributorKey.toBuffer(),TOKEN_PROGRAM_ID.toBuffer(),masterMintKey.toBuffer()],SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);case 44:_yield$PublicKey$find13=_context6.sent;_yield$PublicKey$find14=_slicedToArray(_yield$PublicKey$find13,1);distributorTokenKey=_yield$PublicKey$find14[0];_context6.next=49;return PublicKey.findProgramAddress([walletKey.toBuffer(),TOKEN_PROGRAM_ID.toBuffer(),masterMintKey.toBuffer()],SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);case 49:_yield$PublicKey$find15=_context6.sent;_yield$PublicKey$find16=_slicedToArray(_yield$PublicKey$find15,1);walletTokenKey=_yield$PublicKey$find16[0];instructions.push(new TransactionInstruction({programId:GUMDROP_DISTRIBUTOR_ID,keys:[{pubkey:base.publicKey,isSigner:true,isWritable:false},{pubkey:distributorKey,isSigner:false,isWritable:false},{pubkey:distributorTokenKey,isSigner:false,isWritable:true},{pubkey:walletTokenKey,isSigner:false,isWritable:true},{pubkey:walletKey,isSigner:false,isWritable:true},{pubkey:SystemProgram.programId,isSigner:false,isWritable:false},{pubkey:TOKEN_PROGRAM_ID,isSigner:false,isWritable:false}],data:Buffer.from([].concat(_toConsumableArray(Buffer.from(sha256.digest(\"global:close_distributor_token_account\")).slice(0,8)),_toConsumableArray(new BN(dbump).toArray(\"le\",1))))}));case 53:instructions.push(new TransactionInstruction({programId:GUMDROP_DISTRIBUTOR_ID,keys:[{pubkey:base.publicKey,isSigner:true,isWritable:false},{pubkey:distributorKey,isSigner:false,isWritable:true},{pubkey:distributorWalletKey,isSigner:false,isWritable:true},{pubkey:walletKey,isSigner:true,isWritable:true},{pubkey:SystemProgram.programId,isSigner:false,isWritable:false},{pubkey:TOKEN_PROGRAM_ID,isSigner:false,isWritable:false}].concat(_toConsumableArray(extraKeys)),data:Buffer.from([].concat(_toConsumableArray(Buffer.from(sha256.digest(\"global:close_distributor\")).slice(0,8)),_toConsumableArray(new BN(dbump).toArray(\"le\",1)),_toConsumableArray(new BN(wbump).toArray(\"le\",1))))}));return _context6.abrupt(\"return\",instructions);case 55:case\"end\":return _context6.stop();}}},_callee5,null,[[35,39]]);}));return function closeGumdrop(_x23,_x24,_x25,_x26,_x27,_x28,_x29,_x30){return _ref5.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/Diego/metaplex/js/packages/gumdrop/src/utils/claimant.ts"],"names":["PublicKey","SystemProgram","TransactionInstruction","Token","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_PROGRAM_ID","sha256","BN","bs58","getCandyConfig","getCandyMachineAddress","getCandyMachine","getCreatorTokenAccount","getEdition","getEditionMarkerPda","getMintInfo","CANDY_MACHINE_ID","GUMDROP_DISTRIBUTOR_ID","MerkleTree","csvStringToArray","strData","objPattern","RegExp","arrMatches","arrData","exec","length","push","replace","parseClaimants","input","filename","method","extension","match","Error","arr","search","foundIdx","findIndex","s","includes","numbers","Set","slice","filter","map","n","idx","handle","amount","edition","json","JSON","parse","obj","url","explorerUrlFor","env","key","dropInfoFor","integration","tokenMint","candyConfig","masterMint","type","meta","validateTransferClaims","connection","walletKey","claimants","mintStr","forEach","c","total","reduce","acc","mint","source","validateCandyClaims","candyUuid","configKey","candyMachineKey","candyMachine","remaining","data","itemsAvailable","toNumber","itemsRedeemed","isNaN","authority","equals","config","uuid","getOffsetFromStart","mod","getIndex","offsetFromStart","div","getOffsetFromRight","sub","getIndexAndMask","index","mask","shln","editionTaken","marker","m","setEditionTaken","validateEditionClaims","masterMintStr","masterTokenAccount","masterEditionKey","getAccountInfo","masterEdition","console","log","currentSupply","maxSupply","editions","editionMarkers","undefined","markerKey","markerData","find","pm","markerAcc","Array","chunk","len","chunks","i","buildGumdrop","needsPin","claimIntegration","host","baseKey","temporalSigner","claimInfo","extraParams","leafs","claimant","secret","seeds","seed","toBuffer","Buffer","from","pin","toArray","findProgramAddress","claimantPda","extra","tree","root","getRoot","distributor","dbump","proof","getProof","verified","verifyProof","params","encodeURIComponent","b","encode","query","join","instructions","programId","keys","pubkey","isSigner","isWritable","digest","createApproveInstruction","distributorWalletKey","distributorTokenKey","createAssociatedTokenAccountInstruction","createTransferInstruction","closeGumdrop","base","claimMethod","transferMint","publicKey","distributorKey","wbump","createRevokeInstruction","extraKeys","masterMintKey","walletTokenKey"],"mappings":"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","sourcesContent":["import {\r\n  AccountMeta,\r\n  Connection as RPCConnection,\r\n  Keypair,\r\n  PublicKey,\r\n  SystemProgram,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport {\r\n  Token,\r\n} from \"@solana/spl-token\";\r\nimport {\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@oyster/common\";\r\nimport { sha256 } from \"js-sha256\";\r\nimport BN from 'bn.js';\r\nimport * as bs58 from \"bs58\";\r\n\r\nimport {\r\n  getCandyConfig,\r\n  getCandyMachineAddress,\r\n  getCandyMachine,\r\n  getCreatorTokenAccount,\r\n  getEdition,\r\n  getEditionMarkerPda,\r\n  getMintInfo,\r\n} from \"./accounts\";\r\nimport {\r\n  CANDY_MACHINE_ID,\r\n  GUMDROP_DISTRIBUTOR_ID,\r\n} from \"./ids\";\r\nimport {\r\n  MerkleTree,\r\n} from \"./merkleTree\";\r\n\r\nexport type ClaimantInfo = {\r\n  handle : string,\r\n  amount : number,\r\n  edition : number,\r\n\r\n  pin    : BN,\r\n  url    : string,\r\n\r\n  seed   : PublicKey,\r\n  secret : PublicKey,\r\n};\r\n\r\nconst csvStringToArray = (strData : any) => {\r\n  const objPattern = new RegExp((\"(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|([^\\\\,\\\\r\\\\n]*))\"),\"gi\");\r\n  let arrMatches : RegExpExecArray | null = null;\r\n  const arrData : Array<Array<string>> = [[]];\r\n  while ((arrMatches = objPattern.exec(strData))) {\r\n    if (arrMatches[1].length && arrMatches[1] !== \",\")\r\n      arrData.push([]);\r\n    arrData[arrData.length - 1].push(\r\n      arrMatches[2]\r\n        ? arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ), \"\\\"\")\r\n        : arrMatches[3]);\r\n  }\r\n  return arrData;\r\n}\r\n\r\nexport type Claimants = Array<ClaimantInfo>;\r\nexport const parseClaimants = (\r\n  input : string,\r\n  filename : string,\r\n  method : string,\r\n) : Claimants => {\r\n  const extension = filename.match(/\\.[0-9a-z]+$/i);\r\n  if (extension === null) {\r\n    throw new Error(`Could not parse file extension from ${filename}`);\r\n  }\r\n  switch (extension[0]) {\r\n    case \".csv\": {\r\n      const arr = csvStringToArray(input);\r\n      // TODO: more robust\r\n      let search : string;\r\n      if (method === \"aws-sms\") {\r\n        search = \"phone number\";\r\n      } else if (method === \"aws-email\") {\r\n        search = \"email\";\r\n      } else {\r\n        throw new Error(`Cannot parse csv for ${method}`);\r\n      }\r\n      const foundIdx = arr[0].findIndex(s => s.includes(search));\r\n      if (foundIdx === -1)\r\n        throw new Error(`Could not find ${search} index`);\r\n\r\n      const numbers = new Set(\r\n        arr.slice(1)\r\n           .filter(arr => arr[foundIdx].length > 0)\r\n           .map(arr => arr[foundIdx])\r\n      );\r\n\r\n      return [...numbers].map((n, idx) => {\r\n        return {\r\n          handle : n,\r\n          amount : 1,\r\n          edition : idx,\r\n        } as any;\r\n      });\r\n    }\r\n    case \".json\": {\r\n      const json = JSON.parse(input);\r\n      return json.map((obj : any) => {\r\n        return {\r\n          handle : obj.handle,\r\n          amount : obj.amount,\r\n          edition: obj.edition,\r\n          url    : obj.url,\r\n        };\r\n      });\r\n    }\r\n    default: {\r\n      throw new Error(`Cannot parse file format ${extension} from ${filename}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst explorerUrlFor = (env : string, key : string) => {\r\n  return `https://explorer.solana.com/address/${key}?cluster=${env}`;\r\n}\r\n\r\nexport type ClaimInfo = { [key: string]: any };\r\n\r\nexport const dropInfoFor = (\r\n  env : string,\r\n  integration : string,\r\n  tokenMint : string,\r\n  candyConfig : string,\r\n  masterMint : string,\r\n) => {\r\n  switch (integration) {\r\n    case \"transfer\":\r\n      return { type: \"Token\", meta: explorerUrlFor(env, tokenMint) };\r\n    case \"candy\":\r\n      return { type: \"Candy\", meta: explorerUrlFor(env, candyConfig) };\r\n    case \"edition\":\r\n      return { type: \"Edition\", meta: explorerUrlFor(env, masterMint) };\r\n    default:\r\n      throw new Error(`Unknown claim integration method ${integration}`);\r\n  }\r\n}\r\n\r\nexport const validateTransferClaims = async (\r\n  connection : RPCConnection,\r\n  walletKey : PublicKey,\r\n  claimants : Claimants,\r\n  mintStr : string,\r\n) : Promise<ClaimInfo> => {\r\n  claimants.forEach((c, idx) => {\r\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\r\n    if (!c.amount) throw new Error(`Claimant ${idx} doesn't have amount`);\r\n    if (c.amount === 0) throw new Error(`Claimant ${idx} amount is 0`);\r\n  });\r\n\r\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\r\n  const mint = await getMintInfo(connection, mintStr);\r\n  const source = await getCreatorTokenAccount(\r\n    walletKey,\r\n    connection,\r\n    mint.key,\r\n    total\r\n  );\r\n\r\n  return {\r\n    total: total,\r\n    mint: mint,\r\n    source: source,\r\n  };\r\n}\r\n\r\nexport const validateCandyClaims = async (\r\n  connection : RPCConnection,\r\n  walletKey : PublicKey,\r\n  claimants : Claimants,\r\n  candyConfig : string,\r\n  candyUuid : string,\r\n) : Promise<ClaimInfo> => {\r\n  claimants.forEach((c, idx) => {\r\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\r\n    if (!c.amount) throw new Error(`Claimant ${idx} doesn't have amount`);\r\n    if (c.amount === 0) throw new Error(`Claimant ${idx} amount is 0`);\r\n  });\r\n\r\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\r\n  const configKey = await getCandyConfig(connection, candyConfig);\r\n  const [candyMachineKey, ] = await getCandyMachineAddress(configKey, candyUuid);\r\n\r\n  const candyMachine = await getCandyMachine(connection, candyMachineKey);\r\n\r\n  const remaining = candyMachine.data.itemsAvailable.toNumber() - candyMachine.itemsRedeemed.toNumber();\r\n  if (isNaN(remaining)) {\r\n    // TODO: should this have an override?\r\n    throw new Error(`Could not calculate how many candy machine items are remaining`);\r\n  }\r\n  if (remaining < total) {\r\n    throw new Error(`Distributor is allocated more mints (${total}) `\r\n                  + `than the candy machine has remaining (${remaining})`);\r\n  }\r\n  if (!candyMachine.authority.equals(walletKey)) {\r\n    throw new Error(`Candy machine authority does not match wallet public key`);\r\n  }\r\n\r\n  return {\r\n    total: total,\r\n    config: configKey,\r\n    uuid: candyUuid,\r\n    candyMachineKey: candyMachineKey,\r\n  };\r\n}\r\n\r\nconst getOffsetFromStart = (edition: BN) => {\r\n  return edition.mod(new BN(31 * 8));\r\n};\r\n\r\nconst getIndex = (offsetFromStart: BN) => {\r\n  return offsetFromStart.div(new BN(8));\r\n};\r\n\r\nconst getOffsetFromRight = (offsetFromStart: BN) => {\r\n  return new BN(7).sub(offsetFromStart.mod(new BN(8)));\r\n};\r\n\r\nconst getIndexAndMask = (edition: BN) => {\r\n  const offsetFromStart = getOffsetFromStart(edition);\r\n  return {\r\n    index: getIndex(offsetFromStart).toNumber(),\r\n    mask: new BN(1).shln(getOffsetFromRight(offsetFromStart).toNumber()).toNumber(),\r\n  };\r\n};\r\n\r\nconst editionTaken = (marker : Array<number>, edition : BN) : boolean => {\r\n  const m = getIndexAndMask(edition);\r\n  return (marker[m.index] & m.mask) !== 0;\r\n}\r\n\r\nconst setEditionTaken = (marker : Array<number>, edition : BN) => {\r\n  const m = getIndexAndMask(edition);\r\n  marker[m.index] = marker[m.index] | m.mask;\r\n}\r\n\r\nexport const validateEditionClaims = async (\r\n  connection : RPCConnection,\r\n  walletKey : PublicKey,\r\n  claimants : Claimants,\r\n  masterMintStr : string,\r\n) : Promise<ClaimInfo> => {\r\n  claimants.forEach((c, idx) => {\r\n    if (!c.handle) throw new Error(`Claimant ${idx} doesn't have handle`);\r\n    if (c.amount !== 1) {\r\n      throw new Error(`Claimant ${idx} has amount ${c.amount}. Expected 1 for edition gumdrop`);\r\n    }\r\n  });\r\n\r\n  const total = claimants.reduce((acc, c) => acc + c.amount, 0);\r\n  const masterMint = await getMintInfo(connection, masterMintStr);\r\n  const masterTokenAccount = await getCreatorTokenAccount(\r\n    walletKey,\r\n    connection,\r\n    masterMint.key,\r\n    1 // just check that the creator has the master mint\r\n  );\r\n\r\n  const masterEditionKey = await getEdition(masterMint.key);\r\n  const masterEdition = await connection.getAccountInfo(masterEditionKey);\r\n  if (masterEdition === null) {\r\n    throw new Error(`Could not fetch master edition`);\r\n  }\r\n  console.log(\"Master edition\", masterEdition);\r\n\r\n  // maxSupply is an option, 9 bytes, first is 0 means is none\r\n  const currentSupply = new BN(masterEdition.data.slice(1, 1+8), 8, \"le\").toNumber();\r\n  let maxSupply;\r\n  if (masterEdition.data[9] === 0) {\r\n      maxSupply = null;\r\n  } else {\r\n      maxSupply = new BN(masterEdition.data.slice(10, 10+8), 8, \"le\").toNumber();\r\n  }\r\n  console.log(\"Max supply\", maxSupply);\r\n  console.log(\"Current supply\", currentSupply);\r\n\r\n  if (maxSupply !== null && maxSupply < total) {\r\n    throw new Error(`Distributor is allocated more editions (${total}) `\r\n                  + `than the master has total (${maxSupply})`);\r\n  }\r\n\r\n  // Whether an edition has been claimed is a single bit in a paginated account\r\n  // (pda off of master mint). The following code does some sanity checks\r\n  // around max supply and internally whether the distribution list has\r\n  // duplicate editions, and also checks if the editions were already taken on\r\n  // chain.\r\n  //\r\n  // There is a race condition since the authority to mint is still currently\r\n  // the wallet but it seems like a user error to have other editions being\r\n  // minted while a gumdrop is being created\r\n  const editions : { [key: number]: number } = {};\r\n  const editionMarkers : Array<[PublicKey, Array<number>]> = [];\r\n  for (let idx = 0; idx < claimants.length; ++idx ) {\r\n    const c = claimants[idx];\r\n    if (c.edition === undefined) throw new Error(`Claimant ${idx} doesn't have edition`);\r\n    if (c.edition <= 0) {\r\n      throw new Error(`Claimant ${idx} assigned invalid edition ${c.edition}`);\r\n    }\r\n    if (maxSupply !== null && c.edition > maxSupply) {\r\n      throw new Error(`Claimant ${idx} assigned edition ${c.edition} which is beyond the max supply`);\r\n    }\r\n    if (c.edition in editions) {\r\n      throw new Error(`Claimant ${idx} and ${editions[c.edition]} are both assigned to edition ${c.edition}`);\r\n    }\r\n    const edition = new BN(c.edition);\r\n    const markerKey = await getEditionMarkerPda(masterMint.key, edition);\r\n    let markerData = editionMarkers.find(pm => pm[0].equals(markerKey));\r\n    if (markerData === undefined) {\r\n      const markerAcc = await connection.getAccountInfo(markerKey);\r\n      if (markerAcc === null) {\r\n        editionMarkers.push([markerKey, Array<number>(31)]);\r\n      } else {\r\n        editionMarkers.push([markerKey, [...markerAcc.data.slice(1, 32)]]);\r\n      }\r\n      markerData = editionMarkers[editionMarkers.length - 1];\r\n    }\r\n\r\n    if (markerData === undefined) {\r\n      throw new Error(`Internal Error: Edition marker info still undefined ${c.edition}`);\r\n    }\r\n\r\n    if (editionTaken(markerData[1], edition)) {\r\n      throw new Error(`Claimant ${idx} is assigned to edition ${c.edition} which is already taken`);\r\n    }\r\n\r\n    setEditionTaken(markerData[1], edition);\r\n\r\n    editions[c.edition] = idx;\r\n  }\r\n\r\n  return {\r\n    total: total,\r\n    masterMint: masterMint,\r\n    masterTokenAccount: masterTokenAccount,\r\n  };\r\n}\r\n\r\nexport const chunk = (\r\n  arr : Buffer,\r\n  len : number,\r\n) : Array<Buffer> => {\r\n  const chunks : Array<Buffer> = [];\r\n  const n = arr.length;\r\n  let i = 0;\r\n\r\n  while (i < n) {\r\n    chunks.push(arr.slice(i, i += len));\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\nexport const buildGumdrop = async (\r\n  connection : RPCConnection,\r\n  walletKey : PublicKey,\r\n  needsPin : boolean,\r\n  claimIntegration : string,\r\n  host : string,\r\n  baseKey : PublicKey,\r\n  temporalSigner : PublicKey,\r\n  claimants : Claimants,\r\n  claimInfo  : ClaimInfo,\r\n  extraParams : Array<string> = [],\r\n) : Promise<Array<TransactionInstruction>> => {\r\n\r\n  const leafs : Array<Buffer> = [];\r\n  for (let idx = 0; idx < claimants.length; ++idx ) {\r\n    const claimant = claimants[idx];\r\n    if (!needsPin) {\r\n      try {\r\n        claimant.secret = new PublicKey(claimant.handle);\r\n      } catch (err) {\r\n        throw new Error(`Invalid claimant wallet handle ${err}`);\r\n      }\r\n    } else {\r\n      const seeds = [\r\n        claimant.seed.toBuffer(),\r\n        ...chunk(Buffer.from(claimant.handle), 32),\r\n        Buffer.from(claimant.pin.toArray(\"le\", 4)),\r\n      ];\r\n      const [claimantPda, ] = await PublicKey.findProgramAddress(\r\n          seeds.map(s => s.slice(0, 32)), GUMDROP_DISTRIBUTOR_ID);\r\n      claimant.secret = claimantPda;\r\n    }\r\n    // TODO: get this clarified with jordan... we can either just assign some\r\n    // range of editions to a user or give them an amount and just keep a\r\n    // counter on the distributor... the latter is much less work but we lose\r\n    // the ability to use gumdrop for auction house winnings and such?\r\n    const extra = claimIntegration === \"edition\"\r\n      ? [...new BN(claimant.edition).toArray(\"le\", 8)]\r\n      : []\r\n    leafs.push(Buffer.from(\r\n      [...new BN(idx).toArray(\"le\", 8),\r\n       ...claimant.secret.toBuffer(),\r\n       ...claimant.seed.toBuffer(),\r\n       ...new BN(claimant.amount).toArray(\"le\", 8),\r\n       ...extra\r\n      ]\r\n    ));\r\n  }\r\n\r\n  const tree = new MerkleTree(leafs);\r\n  const root = tree.getRoot();\r\n\r\n  const [distributor, dbump] = await PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from(\"MerkleDistributor\"),\r\n      baseKey.toBuffer(),\r\n    ],\r\n    GUMDROP_DISTRIBUTOR_ID);\r\n\r\n  for (let idx = 0; idx < claimants.length; ++idx) {\r\n    const proof = tree.getProof(idx);\r\n    const verified = tree.verifyProof(idx, proof, root);\r\n\r\n    if (!verified) {\r\n      throw new Error(\"Gumdrop merkle tree verification failed\");\r\n    }\r\n\r\n    const claimant = claimants[idx];\r\n    const params = [\r\n      `distributor=${distributor}`,\r\n      `handle=${encodeURIComponent(claimant.handle)}`,\r\n      `amount=${claimant.amount}`,\r\n      `index=${idx}`,\r\n      `proof=${proof.map(b => bs58.encode(b))}`,\r\n      ...extraParams,\r\n    ];\r\n    if (needsPin) {\r\n      params.push(`pin=${claimant.pin.toNumber()}`);\r\n    } else {\r\n      params.push(`pin=NA`);\r\n    }\r\n    if (claimIntegration === \"transfer\") {\r\n      params.push(`tokenAcc=${claimInfo.source}`);\r\n    } else if (claimIntegration === \"candy\") {\r\n      params.push(`config=${claimInfo.config}`);\r\n      params.push(`uuid=${claimInfo.uuid}`);\r\n    } else {\r\n      params.push(`master=${claimInfo.masterMint.key}`);\r\n      params.push(`edition=${claimant.edition}`);\r\n    }\r\n    const query = params.join(\"&\");\r\n\r\n    claimant.url = `${host}/claim?${query}`;\r\n  }\r\n\r\n  // initial merkle-distributor state\r\n  const instructions = Array<TransactionInstruction>();\r\n  instructions.push(new TransactionInstruction({\r\n      programId: GUMDROP_DISTRIBUTOR_ID,\r\n      keys: [\r\n          { pubkey: baseKey                 , isSigner: true  , isWritable: false } ,\r\n          { pubkey: distributor             , isSigner: false , isWritable: true  } ,\r\n          { pubkey: walletKey               , isSigner: true  , isWritable: false } ,\r\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\r\n      ],\r\n      data: Buffer.from([\r\n        ...Buffer.from(sha256.digest(\"global:new_distributor\")).slice(0, 8),\r\n        ...new BN(dbump).toArray(\"le\", 1),\r\n        ...root,\r\n        ...temporalSigner.toBuffer(),\r\n      ])\r\n  }));\r\n\r\n  if (claimIntegration === \"transfer\") {\r\n    instructions.push(Token.createApproveInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      claimInfo.source,\r\n      distributor,\r\n      walletKey,\r\n      [],\r\n      claimInfo.total\r\n    ));\r\n  } else if (claimIntegration === \"candy\") {\r\n    const [distributorWalletKey, ] = await PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"Wallet\"),\r\n        distributor.toBuffer(),\r\n      ],\r\n      GUMDROP_DISTRIBUTOR_ID\r\n    );\r\n\r\n    instructions.push(new TransactionInstruction({\r\n        programId: CANDY_MACHINE_ID,\r\n        keys: [\r\n            { pubkey: claimInfo.candyMachineKey,isSigner: false , isWritable: true  } ,\r\n            { pubkey: walletKey               , isSigner: true  , isWritable: false } ,\r\n        ],\r\n        data: Buffer.from([\r\n          ...Buffer.from(sha256.digest(\"global:update_authority\")).slice(0, 8),\r\n          ...new BN(1).toArray(\"le\", 1),  // optional exists...\r\n          ...distributorWalletKey.toBuffer(),\r\n        ])\r\n    }));\r\n  } else if (claimIntegration === \"edition\") {\r\n    // transfer master edition to distributor\r\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\r\n      [\r\n        distributor.toBuffer(),\r\n        TOKEN_PROGRAM_ID.toBuffer(),\r\n        claimInfo.masterMint.key.toBuffer(),\r\n      ],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    );\r\n\r\n    instructions.push(Token.createAssociatedTokenAccountInstruction(\r\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        TOKEN_PROGRAM_ID,\r\n        claimInfo.masterMint.key,\r\n        distributorTokenKey,\r\n        distributor,\r\n        walletKey,\r\n      ));\r\n\r\n    instructions.push(Token.createTransferInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        claimInfo.masterTokenAccount,\r\n        distributorTokenKey,\r\n        walletKey,\r\n        [],\r\n        1\r\n      ));\r\n  }\r\n\r\n  return instructions;\r\n}\r\n\r\nexport const closeGumdrop = async (\r\n  connection : RPCConnection,\r\n  walletKey : PublicKey,\r\n  base : Keypair,\r\n  claimMethod : string,\r\n  transferMint : string,\r\n  candyConfig : string,\r\n  candyUuid : string,\r\n  masterMint : string,\r\n) : Promise<Array<TransactionInstruction>> => {\r\n  const [distributorKey, dbump] = await PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from(\"MerkleDistributor\"),\r\n      base.publicKey.toBuffer(),\r\n    ],\r\n    GUMDROP_DISTRIBUTOR_ID);\r\n\r\n  const [distributorWalletKey, wbump] = await PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from(\"Wallet\"),\r\n      distributorKey.toBuffer(),\r\n    ],\r\n    GUMDROP_DISTRIBUTOR_ID\r\n  );\r\n\r\n  let extraKeys : Array<AccountMeta>;\r\n  const instructions = Array<TransactionInstruction>();\r\n\r\n  if (claimMethod === \"transfer\") {\r\n    const mint = await getMintInfo(connection, transferMint);\r\n    const source = await getCreatorTokenAccount(\r\n      walletKey, connection, mint.key, 0\r\n    );\r\n    // distributor is about to be closed anyway so this is redundant but...\r\n    instructions.push(Token.createRevokeInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      source,\r\n      walletKey,\r\n      [],\r\n    ));\r\n  }\r\n\r\n  if (claimMethod === \"candy\") {\r\n    const configKey = await getCandyConfig(connection, candyConfig);\r\n    const [candyMachineKey, ] = await getCandyMachineAddress(\r\n      configKey, candyUuid);\r\n\r\n   extraKeys = [\r\n          { pubkey: candyMachineKey         , isSigner: false , isWritable: true  } ,\r\n          { pubkey: CANDY_MACHINE_ID        , isSigner: false , isWritable: false } ,\r\n    ];\r\n  } else {\r\n    extraKeys = [];\r\n  }\r\n\r\n  if (claimMethod === \"edition\") {\r\n    let masterMintKey: PublicKey;\r\n    try {\r\n      masterMintKey = new PublicKey(masterMint);\r\n    } catch (err) {\r\n      throw new Error(`Invalid mint key ${err}`);\r\n    }\r\n    const [distributorTokenKey, ] = await PublicKey.findProgramAddress(\r\n      [\r\n        distributorKey.toBuffer(),\r\n        TOKEN_PROGRAM_ID.toBuffer(),\r\n        masterMintKey.toBuffer(),\r\n      ],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    );\r\n\r\n    const [walletTokenKey, ] = await PublicKey.findProgramAddress(\r\n      [\r\n        walletKey.toBuffer(),\r\n        TOKEN_PROGRAM_ID.toBuffer(),\r\n        masterMintKey.toBuffer(),\r\n      ],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    );\r\n\r\n    instructions.push(new TransactionInstruction({\r\n        programId: GUMDROP_DISTRIBUTOR_ID,\r\n        keys: [\r\n            { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\r\n            { pubkey: distributorKey          , isSigner: false , isWritable: false } ,\r\n            { pubkey: distributorTokenKey     , isSigner: false , isWritable: true  } ,\r\n            { pubkey: walletTokenKey          , isSigner: false , isWritable: true  } ,\r\n            { pubkey: walletKey               , isSigner: false , isWritable: true  } ,\r\n            { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\r\n            { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\r\n        ],\r\n        data: Buffer.from([\r\n          ...Buffer.from(sha256.digest(\"global:close_distributor_token_account\")).slice(0, 8),\r\n          ...new BN(dbump).toArray(\"le\", 1),\r\n        ])\r\n    }));\r\n  }\r\n\r\n  instructions.push(new TransactionInstruction({\r\n      programId: GUMDROP_DISTRIBUTOR_ID,\r\n      keys: [\r\n          { pubkey: base.publicKey          , isSigner: true  , isWritable: false } ,\r\n          { pubkey: distributorKey          , isSigner: false , isWritable: true  } ,\r\n          { pubkey: distributorWalletKey    , isSigner: false , isWritable: true  } ,\r\n          { pubkey: walletKey               , isSigner: true  , isWritable: true  } ,\r\n          { pubkey: SystemProgram.programId , isSigner: false , isWritable: false } ,\r\n          { pubkey: TOKEN_PROGRAM_ID        , isSigner: false , isWritable: false } ,\r\n          ...extraKeys,\r\n      ],\r\n      data: Buffer.from([\r\n        ...Buffer.from(sha256.digest(\"global:close_distributor\")).slice(0, 8),\r\n        ...new BN(dbump).toArray(\"le\", 1),\r\n        ...new BN(wbump).toArray(\"le\", 1),\r\n      ])\r\n  }));\r\n\r\n  return instructions;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}