{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendSignedTransaction = exports.getUnixTs = exports.sendTransactionWithRetry = exports.sendTransaction = exports.sendTransactions = exports.sendTransactionsWithManualRetry = exports.SequenceType = exports.getErrorForTransaction = exports.useConnectionConfig = exports.useConnection = exports.ConnectionProvider = exports.ENDPOINTS = void 0;\n\nvar utils_1 = require(\"../utils/utils\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar notifications_1 = require(\"../utils/notifications\");\n\nvar ExplorerLink_1 = require(\"../components/ExplorerLink\");\n\nvar hooks_1 = require(\"../hooks\");\n\nvar spl_token_registry_1 = require(\"@solana/spl-token-registry\");\n\nvar wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\n\nexports.ENDPOINTS = [{\n  name: 'mainnet-beta',\n  endpoint: 'https://api.metaplex.solana.com/',\n  ChainId: spl_token_registry_1.ENV.MainnetBeta\n}, {\n  name: 'mainnet-beta (Solana)',\n  endpoint: 'https://api.mainnet-beta.solana.com',\n  ChainId: spl_token_registry_1.ENV.MainnetBeta\n}, {\n  name: 'mainnet-beta (Serum)',\n  endpoint: 'https://solana-api.projectserum.com/',\n  ChainId: spl_token_registry_1.ENV.MainnetBeta\n}, {\n  name: 'testnet',\n  endpoint: web3_js_1.clusterApiUrl('testnet'),\n  ChainId: spl_token_registry_1.ENV.Testnet\n}, {\n  name: 'devnet',\n  endpoint: web3_js_1.clusterApiUrl('devnet'),\n  ChainId: spl_token_registry_1.ENV.Devnet\n}];\nvar DEFAULT = exports.ENDPOINTS[0].endpoint;\nvar ConnectionContext = react_1.default.createContext({\n  endpoint: DEFAULT,\n  setEndpoint: function setEndpoint() {},\n  connection: new web3_js_1.Connection(DEFAULT, 'recent'),\n  env: exports.ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map()\n});\n\nfunction ConnectionProvider(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? undefined : _ref$children;\n\n  var _a, _b;\n\n  var searchParams = hooks_1.useQuerySearch();\n  var network = searchParams.get('network');\n  var queryEndpoint = network && ((_a = exports.ENDPOINTS.find(function (_ref2) {\n    var name = _ref2.name;\n    return name.startsWith(network);\n  })) === null || _a === void 0 ? void 0 : _a.endpoint);\n\n  var _utils_1$useLocalStor = utils_1.useLocalStorageState('connectionEndpoint', exports.ENDPOINTS[0].endpoint),\n      _utils_1$useLocalStor2 = _slicedToArray(_utils_1$useLocalStor, 2),\n      savedEndpoint = _utils_1$useLocalStor2[0],\n      setEndpoint = _utils_1$useLocalStor2[1];\n\n  var endpoint = queryEndpoint || savedEndpoint;\n  var connection = react_1.useMemo(function () {\n    return new web3_js_1.Connection(endpoint, 'recent');\n  }, [endpoint]);\n  var env = ((_b = exports.ENDPOINTS.find(function (end) {\n    return end.endpoint === endpoint;\n  })) === null || _b === void 0 ? void 0 : _b.name) || exports.ENDPOINTS[0].name;\n\n  var _react_1$useState = react_1.useState([]),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n      tokens = _react_1$useState2[0],\n      setTokens = _react_1$useState2[1];\n\n  var _react_1$useState3 = react_1.useState(new Map()),\n      _react_1$useState4 = _slicedToArray(_react_1$useState3, 2),\n      tokenMap = _react_1$useState4[0],\n      setTokenMap = _react_1$useState4[1];\n\n  react_1.useEffect(function () {\n    // fetch token files\n    new spl_token_registry_1.TokenListProvider().resolve().then(function (container) {\n      var _a;\n\n      var list = container.excludeByTag('nft').filterByChainId(((_a = exports.ENDPOINTS.find(function (end) {\n        return end.endpoint === endpoint;\n      })) === null || _a === void 0 ? void 0 : _a.ChainId) || spl_token_registry_1.ENV.MainnetBeta).getList();\n\n      var knownMints = _toConsumableArray(list).reduce(function (map, item) {\n        map.set(item.address, item);\n        return map;\n      }, new Map());\n\n      setTokenMap(knownMints);\n      setTokens(list);\n    });\n  }, [env]); // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n\n  react_1.useEffect(function () {\n    var id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, function () {});\n    return function () {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n  react_1.useEffect(function () {\n    var id = connection.onSlotChange(function () {\n      return null;\n    });\n    return function () {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n  return react_1.default.createElement(ConnectionContext.Provider, {\n    value: {\n      endpoint: endpoint,\n      setEndpoint: setEndpoint,\n      connection: connection,\n      tokens: tokens,\n      tokenMap: tokenMap,\n      env: env\n    }\n  }, children);\n}\n\nexports.ConnectionProvider = ConnectionProvider;\n\nfunction useConnection() {\n  return react_1.useContext(ConnectionContext).connection;\n}\n\nexports.useConnection = useConnection;\n\nfunction useConnectionConfig() {\n  var context = react_1.useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap\n  };\n}\n\nexports.useConnectionConfig = useConnectionConfig;\n\nvar getErrorForTransaction = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, txid) {\n    var tx, errors;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection.confirmTransaction(txid, 'max');\n\n          case 2:\n            _context.next = 4;\n            return connection.getParsedConfirmedTransaction(txid);\n\n          case 4:\n            tx = _context.sent;\n            errors = [];\n\n            if ((tx === null || tx === void 0 ? void 0 : tx.meta) && tx.meta.logMessages) {\n              tx.meta.logMessages.forEach(function (log) {\n                var regex = /Error: (.*)/gm;\n                var m;\n\n                while ((m = regex.exec(log)) !== null) {\n                  // This is necessary to avoid infinite loops with zero-width matches\n                  if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                  }\n\n                  if (m.length > 1) {\n                    errors.push(m[1]);\n                  }\n                }\n              });\n            }\n\n            return _context.abrupt(\"return\", errors);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getErrorForTransaction(_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.getErrorForTransaction = getErrorForTransaction;\nvar SequenceType;\n\n(function (SequenceType) {\n  SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n  SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n  SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType = exports.SequenceType || (exports.SequenceType = {}));\n\nfunction sendTransactionsWithManualRetry(_x3, _x4, _x5, _x6) {\n  return _sendTransactionsWithManualRetry.apply(this, arguments);\n}\n\nfunction _sendTransactionsWithManualRetry() {\n  _sendTransactionsWithManualRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, wallet, instructions, signers) {\n    var stopPoint, tries, lastInstructionsLength, toRemoveSigners, filteredSigners;\n    return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            stopPoint = 0;\n            tries = 0;\n            lastInstructionsLength = null;\n            toRemoveSigners = {};\n            instructions = instructions.filter(function (instr, i) {\n              if (instr.length > 0) {\n                return true;\n              } else {\n                toRemoveSigners[i] = true;\n                return false;\n              }\n            });\n            filteredSigners = signers.filter(function (_, i) {\n              return !toRemoveSigners[i];\n            });\n\n          case 6:\n            if (!(stopPoint < instructions.length && tries < 3)) {\n              _context6.next = 29;\n              break;\n            }\n\n            instructions = instructions.slice(stopPoint, instructions.length);\n            filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n            if (instructions.length === lastInstructionsLength) tries = tries + 1;else tries = 0;\n            _context6.prev = 10;\n\n            if (!(instructions.length === 1)) {\n              _context6.next = 17;\n              break;\n            }\n\n            _context6.next = 14;\n            return exports.sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\n\n          case 14:\n            stopPoint = 1;\n            _context6.next = 20;\n            break;\n\n          case 17:\n            _context6.next = 19;\n            return exports.sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n\n          case 19:\n            stopPoint = _context6.sent;\n\n          case 20:\n            _context6.next = 25;\n            break;\n\n          case 22:\n            _context6.prev = 22;\n            _context6.t0 = _context6[\"catch\"](10);\n            console.error(_context6.t0);\n\n          case 25:\n            console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n            lastInstructionsLength = instructions.length;\n            _context6.next = 6;\n            break;\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee5, null, [[10, 22]]);\n  }));\n  return _sendTransactionsWithManualRetry.apply(this, arguments);\n}\n\nexports.sendTransactionsWithManualRetry = sendTransactionsWithManualRetry;\n\nvar sendTransactions = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, wallet, instructionSet, signersSet) {\n    var sequenceType,\n        commitment,\n        successCallback,\n        failCallback,\n        block,\n        unsignedTxns,\n        _loop,\n        i,\n        _ret,\n        signedTxns,\n        pendingTxns,\n        breakEarlyObject,\n        _loop2,\n        _i,\n        _ret2,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            sequenceType = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : SequenceType.Parallel;\n            commitment = _args3.length > 5 && _args3[5] !== undefined ? _args3[5] : 'singleGossip';\n            successCallback = _args3.length > 6 && _args3[6] !== undefined ? _args3[6] : function (txid, ind) {};\n            failCallback = _args3.length > 7 && _args3[7] !== undefined ? _args3[7] : function (txid, ind) {\n              return false;\n            };\n            block = _args3.length > 8 ? _args3[8] : undefined;\n\n            if (wallet.publicKey) {\n              _context3.next = 7;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 7:\n            unsignedTxns = [];\n\n            if (block) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 11;\n            return connection.getRecentBlockhash(commitment);\n\n          case 11:\n            block = _context3.sent;\n\n          case 12:\n            _loop = function _loop(i) {\n              var instructions = instructionSet[i];\n              var signers = signersSet[i];\n\n              if (instructions.length === 0) {\n                return \"continue\";\n              }\n\n              var transaction = new web3_js_1.Transaction();\n              instructions.forEach(function (instruction) {\n                return transaction.add(instruction);\n              });\n              transaction.recentBlockhash = block.blockhash;\n              transaction.setSigners.apply(transaction, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n\n              if (signers.length > 0) {\n                transaction.partialSign.apply(transaction, _toConsumableArray(signers));\n              }\n\n              unsignedTxns.push(transaction);\n            };\n\n            i = 0;\n\n          case 14:\n            if (!(i < instructionSet.length)) {\n              _context3.next = 21;\n              break;\n            }\n\n            _ret = _loop(i);\n\n            if (!(_ret === \"continue\")) {\n              _context3.next = 18;\n              break;\n            }\n\n            return _context3.abrupt(\"continue\", 18);\n\n          case 18:\n            i++;\n            _context3.next = 14;\n            break;\n\n          case 21:\n            _context3.next = 23;\n            return wallet.signAllTransactions(unsignedTxns);\n\n          case 23:\n            signedTxns = _context3.sent;\n            pendingTxns = [];\n            breakEarlyObject = {\n              breakEarly: false,\n              i: 0\n            };\n            console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n            _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(_i) {\n              var signedTxnPromise;\n              return _regeneratorRuntime.wrap(function _loop2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      signedTxnPromise = sendSignedTransaction({\n                        connection: connection,\n                        signedTransaction: signedTxns[_i]\n                      });\n                      signedTxnPromise.then(function (_ref5) {\n                        var txid = _ref5.txid,\n                            slot = _ref5.slot;\n                        successCallback(txid, _i);\n                      }).catch(function (reason) {\n                        // @ts-ignore\n                        failCallback(signedTxns[_i], _i);\n\n                        if (sequenceType === SequenceType.StopOnFailure) {\n                          breakEarlyObject.breakEarly = true;\n                          breakEarlyObject.i = _i;\n                        }\n                      });\n\n                      if (!(sequenceType !== SequenceType.Parallel)) {\n                        _context2.next = 16;\n                        break;\n                      }\n\n                      _context2.prev = 3;\n                      _context2.next = 6;\n                      return signedTxnPromise;\n\n                    case 6:\n                      _context2.next = 14;\n                      break;\n\n                    case 8:\n                      _context2.prev = 8;\n                      _context2.t0 = _context2[\"catch\"](3);\n                      console.log('Caught failure', _context2.t0);\n\n                      if (!breakEarlyObject.breakEarly) {\n                        _context2.next = 14;\n                        break;\n                      }\n\n                      console.log('Died on ', breakEarlyObject.i);\n                      return _context2.abrupt(\"return\", {\n                        v: breakEarlyObject.i\n                      });\n\n                    case 14:\n                      _context2.next = 17;\n                      break;\n\n                    case 16:\n                      pendingTxns.push(signedTxnPromise);\n\n                    case 17:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop2, null, [[3, 8]]);\n            });\n            _i = 0;\n\n          case 29:\n            if (!(_i < signedTxns.length)) {\n              _context3.next = 37;\n              break;\n            }\n\n            return _context3.delegateYield(_loop2(_i), \"t0\", 31);\n\n          case 31:\n            _ret2 = _context3.t0;\n\n            if (!(typeof _ret2 === \"object\")) {\n              _context3.next = 34;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", _ret2.v);\n\n          case 34:\n            _i++;\n            _context3.next = 29;\n            break;\n\n          case 37:\n            if (!(sequenceType !== SequenceType.Parallel)) {\n              _context3.next = 40;\n              break;\n            }\n\n            _context3.next = 40;\n            return Promise.all(pendingTxns);\n\n          case 40:\n            return _context3.abrupt(\"return\", signedTxns.length);\n\n          case 41:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sendTransactions(_x7, _x8, _x9, _x10) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactions = sendTransactions;\n\nvar sendTransaction = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, wallet, instructions, signers) {\n    var awaitConfirmation,\n        commitment,\n        includesFeePayer,\n        block,\n        transaction,\n        _transaction,\n        _transaction2,\n        _transaction3,\n        rawTransaction,\n        options,\n        txid,\n        slot,\n        confirmation,\n        errors,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            awaitConfirmation = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : true;\n            commitment = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : 'singleGossip';\n            includesFeePayer = _args4.length > 6 && _args4[6] !== undefined ? _args4[6] : false;\n            block = _args4.length > 7 ? _args4[7] : undefined;\n\n            if (wallet.publicKey) {\n              _context4.next = 6;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 6:\n            transaction = new web3_js_1.Transaction();\n            instructions.forEach(function (instruction) {\n              return transaction.add(instruction);\n            });\n            _context4.t0 = block;\n\n            if (_context4.t0) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 12;\n            return connection.getRecentBlockhash(commitment);\n\n          case 12:\n            _context4.t0 = _context4.sent;\n\n          case 13:\n            transaction.recentBlockhash = _context4.t0.blockhash;\n\n            if (includesFeePayer) {\n              (_transaction = transaction).setSigners.apply(_transaction, _toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              })));\n            } else {\n              (_transaction2 = transaction).setSigners.apply(_transaction2, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n            }\n\n            if (signers.length > 0) {\n              (_transaction3 = transaction).partialSign.apply(_transaction3, _toConsumableArray(signers));\n            }\n\n            if (includesFeePayer) {\n              _context4.next = 20;\n              break;\n            }\n\n            _context4.next = 19;\n            return wallet.signTransaction(transaction);\n\n          case 19:\n            transaction = _context4.sent;\n\n          case 20:\n            rawTransaction = transaction.serialize();\n            options = {\n              skipPreflight: true,\n              commitment: commitment\n            };\n            _context4.next = 24;\n            return connection.sendRawTransaction(rawTransaction, options);\n\n          case 24:\n            txid = _context4.sent;\n            slot = 0;\n\n            if (!awaitConfirmation) {\n              _context4.next = 39;\n              break;\n            }\n\n            _context4.next = 29;\n            return awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n\n          case 29:\n            confirmation = _context4.sent;\n\n            if (confirmation) {\n              _context4.next = 32;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 32:\n            slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n\n            if (!(confirmation === null || confirmation === void 0 ? void 0 : confirmation.err)) {\n              _context4.next = 39;\n              break;\n            }\n\n            _context4.next = 36;\n            return exports.getErrorForTransaction(connection, txid);\n\n          case 36:\n            errors = _context4.sent;\n            notifications_1.notify({\n              message: 'Transaction failed...',\n              description: react_1.default.createElement(react_1.default.Fragment, null, errors.map(function (err) {\n                return react_1.default.createElement(\"div\", null, err);\n              }), react_1.default.createElement(ExplorerLink_1.ExplorerLink, {\n                address: txid,\n                type: \"transaction\"\n              })),\n              type: 'error'\n            });\n            throw new Error(\"Raw transaction \".concat(txid, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 39:\n            return _context4.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 40:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function sendTransaction(_x11, _x12, _x13, _x14) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nexports.sendTransaction = sendTransaction;\n\nvar sendTransactionWithRetry = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, wallet, instructions, signers) {\n    var commitment,\n        includesFeePayer,\n        block,\n        beforeSend,\n        transaction,\n        _transaction4,\n        _transaction5,\n        _transaction6,\n        _yield$sendSignedTran,\n        txid,\n        slot,\n        _args5 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            commitment = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : 'singleGossip';\n            includesFeePayer = _args5.length > 5 && _args5[5] !== undefined ? _args5[5] : false;\n            block = _args5.length > 6 ? _args5[6] : undefined;\n            beforeSend = _args5.length > 7 ? _args5[7] : undefined;\n\n            if (wallet.publicKey) {\n              _context5.next = 6;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 6:\n            transaction = new web3_js_1.Transaction();\n            instructions.forEach(function (instruction) {\n              return transaction.add(instruction);\n            });\n            _context5.t0 = block;\n\n            if (_context5.t0) {\n              _context5.next = 13;\n              break;\n            }\n\n            _context5.next = 12;\n            return connection.getRecentBlockhash(commitment);\n\n          case 12:\n            _context5.t0 = _context5.sent;\n\n          case 13:\n            transaction.recentBlockhash = _context5.t0.blockhash;\n\n            if (includesFeePayer) {\n              (_transaction4 = transaction).setSigners.apply(_transaction4, _toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              })));\n            } else {\n              (_transaction5 = transaction).setSigners.apply(_transaction5, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n            }\n\n            if (signers.length > 0) {\n              (_transaction6 = transaction).partialSign.apply(_transaction6, _toConsumableArray(signers));\n            }\n\n            if (includesFeePayer) {\n              _context5.next = 20;\n              break;\n            }\n\n            _context5.next = 19;\n            return wallet.signTransaction(transaction);\n\n          case 19:\n            transaction = _context5.sent;\n\n          case 20:\n            if (beforeSend) {\n              beforeSend();\n            }\n\n            _context5.next = 23;\n            return sendSignedTransaction({\n              connection: connection,\n              signedTransaction: transaction\n            });\n\n          case 23:\n            _yield$sendSignedTran = _context5.sent;\n            txid = _yield$sendSignedTran.txid;\n            slot = _yield$sendSignedTran.slot;\n            return _context5.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 27:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function sendTransactionWithRetry(_x15, _x16, _x17, _x18) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactionWithRetry = sendTransactionWithRetry;\n\nvar getUnixTs = function getUnixTs() {\n  return new Date().getTime() / 1000;\n};\n\nexports.getUnixTs = getUnixTs;\nvar DEFAULT_TIMEOUT = 15000;\n\nfunction sendSignedTransaction(_x19) {\n  return _sendSignedTransaction.apply(this, arguments);\n}\n\nfunction _sendSignedTransaction() {\n  _sendSignedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref8) {\n    var signedTransaction, connection, _ref8$timeout, timeout, rawTransaction, startTime, slot, txid, done, confirmation, simulateResult, i, line;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            signedTransaction = _ref8.signedTransaction, connection = _ref8.connection, _ref8$timeout = _ref8.timeout, timeout = _ref8$timeout === void 0 ? DEFAULT_TIMEOUT : _ref8$timeout;\n            rawTransaction = signedTransaction.serialize();\n            startTime = exports.getUnixTs();\n            slot = 0;\n            _context8.next = 6;\n            return connection.sendRawTransaction(rawTransaction, {\n              skipPreflight: true\n            });\n\n          case 6:\n            txid = _context8.sent;\n            console.log('Started awaiting confirmation for', txid);\n            done = false;\n\n            _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n              return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      if (!(!done && exports.getUnixTs() - startTime < timeout)) {\n                        _context7.next = 6;\n                        break;\n                      }\n\n                      connection.sendRawTransaction(rawTransaction, {\n                        skipPreflight: true\n                      });\n                      _context7.next = 4;\n                      return utils_1.sleep(500);\n\n                    case 4:\n                      _context7.next = 0;\n                      break;\n\n                    case 6:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, _callee6);\n            }))();\n\n            _context8.prev = 10;\n            _context8.next = 13;\n            return awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n\n          case 13:\n            confirmation = _context8.sent;\n\n            if (confirmation) {\n              _context8.next = 16;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 16:\n            if (!confirmation.err) {\n              _context8.next = 19;\n              break;\n            }\n\n            console.error(confirmation.err);\n            throw new Error('Transaction failed: Custom instruction error');\n\n          case 19:\n            slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n            _context8.next = 47;\n            break;\n\n          case 22:\n            _context8.prev = 22;\n            _context8.t0 = _context8[\"catch\"](10);\n            console.error('Timeout Error caught', _context8.t0);\n\n            if (!_context8.t0.timeout) {\n              _context8.next = 27;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 27:\n            simulateResult = null;\n            _context8.prev = 28;\n            _context8.next = 31;\n            return simulateTransaction(connection, signedTransaction, 'single');\n\n          case 31:\n            simulateResult = _context8.sent.value;\n            _context8.next = 36;\n            break;\n\n          case 34:\n            _context8.prev = 34;\n            _context8.t1 = _context8[\"catch\"](28);\n\n          case 36:\n            if (!(simulateResult && simulateResult.err)) {\n              _context8.next = 47;\n              break;\n            }\n\n            if (!simulateResult.logs) {\n              _context8.next = 46;\n              break;\n            }\n\n            i = simulateResult.logs.length - 1;\n\n          case 39:\n            if (!(i >= 0)) {\n              _context8.next = 46;\n              break;\n            }\n\n            line = simulateResult.logs[i];\n\n            if (!line.startsWith('Program log: ')) {\n              _context8.next = 43;\n              break;\n            }\n\n            throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n\n          case 43:\n            --i;\n            _context8.next = 39;\n            break;\n\n          case 46:\n            throw new Error(JSON.stringify(simulateResult.err));\n\n          case 47:\n            _context8.prev = 47;\n            done = true;\n            return _context8.finish(47);\n\n          case 50:\n            console.log('Latency', txid, exports.getUnixTs() - startTime);\n            return _context8.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 52:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee7, null, [[10, 22, 47, 50], [28, 34]]);\n  }));\n  return _sendSignedTransaction.apply(this, arguments);\n}\n\nexports.sendSignedTransaction = sendSignedTransaction;\n\nfunction simulateTransaction(_x20, _x21, _x22) {\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee8$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context9.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString('base64');\n            config = {\n              encoding: 'base64',\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context9.next = 10;\n            return connection._rpcRequest('simulateTransaction', args);\n\n          case 10:\n            res = _context9.sent;\n\n            if (!res.error) {\n              _context9.next = 13;\n              break;\n            }\n\n            throw new Error('failed to simulate transaction: ' + res.error.message);\n\n          case 13:\n            return _context9.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction awaitTransactionSignatureConfirmation(_x23, _x24, _x25) {\n  return _awaitTransactionSignatureConfirmation.apply(this, arguments);\n}\n\nfunction _awaitTransactionSignatureConfirmation() {\n  _awaitTransactionSignatureConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(txid, timeout, connection) {\n    var commitment,\n        queryStatus,\n        done,\n        status,\n        subId,\n        _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee11$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            commitment = _args12.length > 3 && _args12[3] !== undefined ? _args12[3] : 'recent';\n            queryStatus = _args12.length > 4 && _args12[4] !== undefined ? _args12[4] : false;\n            done = false;\n            status = {\n              slot: 0,\n              confirmations: 0,\n              err: null\n            };\n            subId = 0;\n            _context12.next = 7;\n            return new Promise( /*#__PURE__*/function () {\n              var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(resolve, reject) {\n                return _regeneratorRuntime.wrap(function _callee10$(_context11) {\n                  while (1) {\n                    switch (_context11.prev = _context11.next) {\n                      case 0:\n                        setTimeout(function () {\n                          if (done) {\n                            return;\n                          }\n\n                          done = true;\n                          console.log('Rejecting for timeout...');\n                          reject({\n                            timeout: true\n                          });\n                        }, timeout);\n\n                        try {\n                          subId = connection.onSignature(txid, function (result, context) {\n                            done = true;\n                            status = {\n                              err: result.err,\n                              slot: context.slot,\n                              confirmations: 0\n                            };\n\n                            if (result.err) {\n                              console.log('Rejected via websocket', result.err);\n                              reject(status);\n                            } else {\n                              console.log('Resolved via websocket', result);\n                              resolve(status);\n                            }\n                          }, commitment);\n                        } catch (e) {\n                          done = true;\n                          console.error('WS error in setup', txid, e);\n                        }\n\n                      case 2:\n                        if (!(!done && queryStatus)) {\n                          _context11.next = 8;\n                          break;\n                        }\n\n                        // eslint-disable-next-line no-loop-func\n                        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                          var signatureStatuses;\n                          return _regeneratorRuntime.wrap(function _callee9$(_context10) {\n                            while (1) {\n                              switch (_context10.prev = _context10.next) {\n                                case 0:\n                                  _context10.prev = 0;\n                                  _context10.next = 3;\n                                  return connection.getSignatureStatuses([txid]);\n\n                                case 3:\n                                  signatureStatuses = _context10.sent;\n                                  status = signatureStatuses && signatureStatuses.value[0];\n\n                                  if (!done) {\n                                    if (!status) {\n                                      console.log('REST null result for', txid, status);\n                                    } else if (status.err) {\n                                      console.log('REST error for', txid, status);\n                                      done = true;\n                                      reject(status.err);\n                                    } else if (!status.confirmations) {\n                                      console.log('REST no confirmations for', txid, status);\n                                    } else {\n                                      console.log('REST confirmation for', txid, status);\n                                      done = true;\n                                      resolve(status);\n                                    }\n                                  }\n\n                                  _context10.next = 11;\n                                  break;\n\n                                case 8:\n                                  _context10.prev = 8;\n                                  _context10.t0 = _context10[\"catch\"](0);\n\n                                  if (!done) {\n                                    console.log('REST connection error: txid', txid, _context10.t0);\n                                  }\n\n                                case 11:\n                                case \"end\":\n                                  return _context10.stop();\n                              }\n                            }\n                          }, _callee9, null, [[0, 8]]);\n                        }))();\n\n                        _context11.next = 6;\n                        return utils_1.sleep(2000);\n\n                      case 6:\n                        _context11.next = 2;\n                        break;\n\n                      case 8:\n                      case \"end\":\n                        return _context11.stop();\n                    }\n                  }\n                }, _callee10);\n              }));\n\n              return function (_x26, _x27) {\n                return _ref10.apply(this, arguments);\n              };\n            }());\n\n          case 7:\n            status = _context12.sent;\n            //@ts-ignore\n            if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n            done = true;\n            console.log('Returning status', status);\n            return _context12.abrupt(\"return\", status);\n\n          case 12:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _awaitTransactionSignatureConfirmation.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/contexts/connection.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sendSignedTransaction = exports.getUnixTs = exports.sendTransactionWithRetry = exports.sendTransaction = exports.sendTransactions = exports.sendTransactionsWithManualRetry = exports.SequenceType = exports.getErrorForTransaction = exports.useConnectionConfig = exports.useConnection = exports.ConnectionProvider = exports.ENDPOINTS = void 0;\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst react_1 = __importStar(require(\"react\"));\r\nconst notifications_1 = require(\"../utils/notifications\");\r\nconst ExplorerLink_1 = require(\"../components/ExplorerLink\");\r\nconst hooks_1 = require(\"../hooks\");\r\nconst spl_token_registry_1 = require(\"@solana/spl-token-registry\");\r\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\r\nexports.ENDPOINTS = [\r\n    {\r\n        name: 'mainnet-beta',\r\n        endpoint: 'https://api.metaplex.solana.com/',\r\n        ChainId: spl_token_registry_1.ENV.MainnetBeta,\r\n    },\r\n    {\r\n        name: 'mainnet-beta (Solana)',\r\n        endpoint: 'https://api.mainnet-beta.solana.com',\r\n        ChainId: spl_token_registry_1.ENV.MainnetBeta,\r\n    },\r\n    {\r\n        name: 'mainnet-beta (Serum)',\r\n        endpoint: 'https://solana-api.projectserum.com/',\r\n        ChainId: spl_token_registry_1.ENV.MainnetBeta,\r\n    },\r\n    {\r\n        name: 'testnet',\r\n        endpoint: web3_js_1.clusterApiUrl('testnet'),\r\n        ChainId: spl_token_registry_1.ENV.Testnet,\r\n    },\r\n    {\r\n        name: 'devnet',\r\n        endpoint: web3_js_1.clusterApiUrl('devnet'),\r\n        ChainId: spl_token_registry_1.ENV.Devnet,\r\n    },\r\n];\r\nconst DEFAULT = exports.ENDPOINTS[0].endpoint;\r\nconst ConnectionContext = react_1.default.createContext({\r\n    endpoint: DEFAULT,\r\n    setEndpoint: () => { },\r\n    connection: new web3_js_1.Connection(DEFAULT, 'recent'),\r\n    env: exports.ENDPOINTS[0].name,\r\n    tokens: [],\r\n    tokenMap: new Map(),\r\n});\r\nfunction ConnectionProvider({ children = undefined }) {\r\n    var _a, _b;\r\n    const searchParams = hooks_1.useQuerySearch();\r\n    const network = searchParams.get('network');\r\n    const queryEndpoint = network && ((_a = exports.ENDPOINTS.find(({ name }) => name.startsWith(network))) === null || _a === void 0 ? void 0 : _a.endpoint);\r\n    const [savedEndpoint, setEndpoint] = utils_1.useLocalStorageState('connectionEndpoint', exports.ENDPOINTS[0].endpoint);\r\n    const endpoint = queryEndpoint || savedEndpoint;\r\n    const connection = react_1.useMemo(() => new web3_js_1.Connection(endpoint, 'recent'), [endpoint]);\r\n    const env = ((_b = exports.ENDPOINTS.find(end => end.endpoint === endpoint)) === null || _b === void 0 ? void 0 : _b.name) || exports.ENDPOINTS[0].name;\r\n    const [tokens, setTokens] = react_1.useState([]);\r\n    const [tokenMap, setTokenMap] = react_1.useState(new Map());\r\n    react_1.useEffect(() => {\r\n        // fetch token files\r\n        new spl_token_registry_1.TokenListProvider().resolve().then(container => {\r\n            var _a;\r\n            const list = container\r\n                .excludeByTag('nft')\r\n                .filterByChainId(((_a = exports.ENDPOINTS.find(end => end.endpoint === endpoint)) === null || _a === void 0 ? void 0 : _a.ChainId) ||\r\n                spl_token_registry_1.ENV.MainnetBeta)\r\n                .getList();\r\n            const knownMints = [...list].reduce((map, item) => {\r\n                map.set(item.address, item);\r\n                return map;\r\n            }, new Map());\r\n            setTokenMap(knownMints);\r\n            setTokens(list);\r\n        });\r\n    }, [env]);\r\n    // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\r\n    // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\r\n    // This is a hack to prevent the list from every getting empty\r\n    react_1.useEffect(() => {\r\n        const id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, () => { });\r\n        return () => {\r\n            connection.removeAccountChangeListener(id);\r\n        };\r\n    }, [connection]);\r\n    react_1.useEffect(() => {\r\n        const id = connection.onSlotChange(() => null);\r\n        return () => {\r\n            connection.removeSlotChangeListener(id);\r\n        };\r\n    }, [connection]);\r\n    return (react_1.default.createElement(ConnectionContext.Provider, { value: {\r\n            endpoint,\r\n            setEndpoint,\r\n            connection,\r\n            tokens,\r\n            tokenMap,\r\n            env,\r\n        } }, children));\r\n}\r\nexports.ConnectionProvider = ConnectionProvider;\r\nfunction useConnection() {\r\n    return react_1.useContext(ConnectionContext).connection;\r\n}\r\nexports.useConnection = useConnection;\r\nfunction useConnectionConfig() {\r\n    const context = react_1.useContext(ConnectionContext);\r\n    return {\r\n        endpoint: context.endpoint,\r\n        setEndpoint: context.setEndpoint,\r\n        env: context.env,\r\n        tokens: context.tokens,\r\n        tokenMap: context.tokenMap,\r\n    };\r\n}\r\nexports.useConnectionConfig = useConnectionConfig;\r\nconst getErrorForTransaction = async (connection, txid) => {\r\n    // wait for all confirmation before geting transaction\r\n    await connection.confirmTransaction(txid, 'max');\r\n    const tx = await connection.getParsedConfirmedTransaction(txid);\r\n    const errors = [];\r\n    if ((tx === null || tx === void 0 ? void 0 : tx.meta) && tx.meta.logMessages) {\r\n        tx.meta.logMessages.forEach(log => {\r\n            const regex = /Error: (.*)/gm;\r\n            let m;\r\n            while ((m = regex.exec(log)) !== null) {\r\n                // This is necessary to avoid infinite loops with zero-width matches\r\n                if (m.index === regex.lastIndex) {\r\n                    regex.lastIndex++;\r\n                }\r\n                if (m.length > 1) {\r\n                    errors.push(m[1]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return errors;\r\n};\r\nexports.getErrorForTransaction = getErrorForTransaction;\r\nvar SequenceType;\r\n(function (SequenceType) {\r\n    SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\r\n    SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\r\n    SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\r\n})(SequenceType = exports.SequenceType || (exports.SequenceType = {}));\r\nasync function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\r\n    let stopPoint = 0;\r\n    let tries = 0;\r\n    let lastInstructionsLength = null;\r\n    let toRemoveSigners = {};\r\n    instructions = instructions.filter((instr, i) => {\r\n        if (instr.length > 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            toRemoveSigners[i] = true;\r\n            return false;\r\n        }\r\n    });\r\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n    while (stopPoint < instructions.length && tries < 3) {\r\n        instructions = instructions.slice(stopPoint, instructions.length);\r\n        filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n        if (instructions.length === lastInstructionsLength)\r\n            tries = tries + 1;\r\n        else\r\n            tries = 0;\r\n        try {\r\n            if (instructions.length === 1) {\r\n                await exports.sendTransactionWithRetry(connection, wallet, instructions[0], filteredSigners[0], 'single');\r\n                stopPoint = 1;\r\n            }\r\n            else {\r\n                stopPoint = await exports.sendTransactions(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\r\n        lastInstructionsLength = instructions.length;\r\n    }\r\n}\r\nexports.sendTransactionsWithManualRetry = sendTransactionsWithManualRetry;\r\nconst sendTransactions = async (connection, wallet, instructionSet, signersSet, sequenceType = SequenceType.Parallel, commitment = 'singleGossip', successCallback = (txid, ind) => { }, failCallback = (txid, ind) => false, block) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    const unsignedTxns = [];\r\n    if (!block) {\r\n        block = await connection.getRecentBlockhash(commitment);\r\n    }\r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n        const instructions = instructionSet[i];\r\n        const signers = signersSet[i];\r\n        if (instructions.length === 0) {\r\n            continue;\r\n        }\r\n        let transaction = new web3_js_1.Transaction();\r\n        instructions.forEach(instruction => transaction.add(instruction));\r\n        transaction.recentBlockhash = block.blockhash;\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n        if (signers.length > 0) {\r\n            transaction.partialSign(...signers);\r\n        }\r\n        unsignedTxns.push(transaction);\r\n    }\r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n    const pendingTxns = [];\r\n    let breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n        const signedTxnPromise = sendSignedTransaction({\r\n            connection,\r\n            signedTransaction: signedTxns[i],\r\n        });\r\n        signedTxnPromise\r\n            .then(({ txid, slot }) => {\r\n            successCallback(txid, i);\r\n        })\r\n            .catch(reason => {\r\n            // @ts-ignore\r\n            failCallback(signedTxns[i], i);\r\n            if (sequenceType === SequenceType.StopOnFailure) {\r\n                breakEarlyObject.breakEarly = true;\r\n                breakEarlyObject.i = i;\r\n            }\r\n        });\r\n        if (sequenceType !== SequenceType.Parallel) {\r\n            try {\r\n                await signedTxnPromise;\r\n            }\r\n            catch (e) {\r\n                console.log('Caught failure', e);\r\n                if (breakEarlyObject.breakEarly) {\r\n                    console.log('Died on ', breakEarlyObject.i);\r\n                    return breakEarlyObject.i; // Return the txn we failed on by index\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            pendingTxns.push(signedTxnPromise);\r\n        }\r\n    }\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n        await Promise.all(pendingTxns);\r\n    }\r\n    return signedTxns.length;\r\n};\r\nexports.sendTransactions = sendTransactions;\r\nconst sendTransaction = async (connection, wallet, instructions, signers, awaitConfirmation = true, commitment = 'singleGossip', includesFeePayer = false, block) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    let transaction = new web3_js_1.Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\r\n    if (includesFeePayer) {\r\n        transaction.setSigners(...signers.map(s => s.publicKey));\r\n    }\r\n    else {\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n    }\r\n    if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n        transaction = await wallet.signTransaction(transaction);\r\n    }\r\n    const rawTransaction = transaction.serialize();\r\n    let options = {\r\n        skipPreflight: true,\r\n        commitment,\r\n    };\r\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n    let slot = 0;\r\n    if (awaitConfirmation) {\r\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\r\n        if (!confirmation)\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\r\n        if (confirmation === null || confirmation === void 0 ? void 0 : confirmation.err) {\r\n            const errors = await exports.getErrorForTransaction(connection, txid);\r\n            notifications_1.notify({\r\n                message: 'Transaction failed...',\r\n                description: (react_1.default.createElement(react_1.default.Fragment, null,\r\n                    errors.map(err => (react_1.default.createElement(\"div\", null, err))),\r\n                    react_1.default.createElement(ExplorerLink_1.ExplorerLink, { address: txid, type: \"transaction\" }))),\r\n                type: 'error',\r\n            });\r\n            throw new Error(`Raw transaction ${txid} failed (${JSON.stringify(status)})`);\r\n        }\r\n    }\r\n    return { txid, slot };\r\n};\r\nexports.sendTransaction = sendTransaction;\r\nconst sendTransactionWithRetry = async (connection, wallet, instructions, signers, commitment = 'singleGossip', includesFeePayer = false, block, beforeSend) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    let transaction = new web3_js_1.Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\r\n    if (includesFeePayer) {\r\n        transaction.setSigners(...signers.map(s => s.publicKey));\r\n    }\r\n    else {\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n    }\r\n    if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n        transaction = await wallet.signTransaction(transaction);\r\n    }\r\n    if (beforeSend) {\r\n        beforeSend();\r\n    }\r\n    const { txid, slot } = await sendSignedTransaction({\r\n        connection,\r\n        signedTransaction: transaction,\r\n    });\r\n    return { txid, slot };\r\n};\r\nexports.sendTransactionWithRetry = sendTransactionWithRetry;\r\nconst getUnixTs = () => {\r\n    return new Date().getTime() / 1000;\r\n};\r\nexports.getUnixTs = getUnixTs;\r\nconst DEFAULT_TIMEOUT = 15000;\r\nasync function sendSignedTransaction({ signedTransaction, connection, timeout = DEFAULT_TIMEOUT, }) {\r\n    const rawTransaction = signedTransaction.serialize();\r\n    const startTime = exports.getUnixTs();\r\n    let slot = 0;\r\n    const txid = await connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n    });\r\n    console.log('Started awaiting confirmation for', txid);\r\n    let done = false;\r\n    (async () => {\r\n        while (!done && exports.getUnixTs() - startTime < timeout) {\r\n            connection.sendRawTransaction(rawTransaction, {\r\n                skipPreflight: true,\r\n            });\r\n            await utils_1.sleep(500);\r\n        }\r\n    })();\r\n    try {\r\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\r\n        if (!confirmation)\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        if (confirmation.err) {\r\n            console.error(confirmation.err);\r\n            throw new Error('Transaction failed: Custom instruction error');\r\n        }\r\n        slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\r\n    }\r\n    catch (err) {\r\n        console.error('Timeout Error caught', err);\r\n        if (err.timeout) {\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        }\r\n        let simulateResult = null;\r\n        try {\r\n            simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\r\n        }\r\n        catch (e) { }\r\n        if (simulateResult && simulateResult.err) {\r\n            if (simulateResult.logs) {\r\n                for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n                    const line = simulateResult.logs[i];\r\n                    if (line.startsWith('Program log: ')) {\r\n                        throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\r\n                    }\r\n                }\r\n            }\r\n            throw new Error(JSON.stringify(simulateResult.err));\r\n        }\r\n        // throw new Error('Transaction failed');\r\n    }\r\n    finally {\r\n        done = true;\r\n    }\r\n    console.log('Latency', txid, exports.getUnixTs() - startTime);\r\n    return { txid, slot };\r\n}\r\nexports.sendSignedTransaction = sendSignedTransaction;\r\nasync function simulateTransaction(connection, transaction, commitment) {\r\n    // @ts-ignore\r\n    transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching);\r\n    const signData = transaction.serializeMessage();\r\n    // @ts-ignore\r\n    const wireTransaction = transaction._serialize(signData);\r\n    const encodedTransaction = wireTransaction.toString('base64');\r\n    const config = { encoding: 'base64', commitment };\r\n    const args = [encodedTransaction, config];\r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest('simulateTransaction', args);\r\n    if (res.error) {\r\n        throw new Error('failed to simulate transaction: ' + res.error.message);\r\n    }\r\n    return res.result;\r\n}\r\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection, commitment = 'recent', queryStatus = false) {\r\n    let done = false;\r\n    let status = {\r\n        slot: 0,\r\n        confirmations: 0,\r\n        err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n            console.log('Rejecting for timeout...');\r\n            reject({ timeout: true });\r\n        }, timeout);\r\n        try {\r\n            subId = connection.onSignature(txid, (result, context) => {\r\n                done = true;\r\n                status = {\r\n                    err: result.err,\r\n                    slot: context.slot,\r\n                    confirmations: 0,\r\n                };\r\n                if (result.err) {\r\n                    console.log('Rejected via websocket', result.err);\r\n                    reject(status);\r\n                }\r\n                else {\r\n                    console.log('Resolved via websocket', result);\r\n                    resolve(status);\r\n                }\r\n            }, commitment);\r\n        }\r\n        catch (e) {\r\n            done = true;\r\n            console.error('WS error in setup', txid, e);\r\n        }\r\n        while (!done && queryStatus) {\r\n            // eslint-disable-next-line no-loop-func\r\n            (async () => {\r\n                try {\r\n                    const signatureStatuses = await connection.getSignatureStatuses([\r\n                        txid,\r\n                    ]);\r\n                    status = signatureStatuses && signatureStatuses.value[0];\r\n                    if (!done) {\r\n                        if (!status) {\r\n                            console.log('REST null result for', txid, status);\r\n                        }\r\n                        else if (status.err) {\r\n                            console.log('REST error for', txid, status);\r\n                            done = true;\r\n                            reject(status.err);\r\n                        }\r\n                        else if (!status.confirmations) {\r\n                            console.log('REST no confirmations for', txid, status);\r\n                        }\r\n                        else {\r\n                            console.log('REST confirmation for', txid, status);\r\n                            done = true;\r\n                            resolve(status);\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!done) {\r\n                        console.log('REST connection error: txid', txid, e);\r\n                    }\r\n                }\r\n            })();\r\n            await utils_1.sleep(2000);\r\n        }\r\n    });\r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId])\r\n        connection.removeSignatureListener(subId);\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n}\r\n//# sourceMappingURL=connection.js.map"]},"metadata":{},"sourceType":"script"}