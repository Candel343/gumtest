{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.redeemParticipationBidV3 = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst _1 = require(\".\");\n\nconst actions_1 = require(\"../../actions\");\n\nconst utils_1 = require(\"../../utils\");\n\nasync function redeemParticipationBidV3(vault, safetyDepositTokenStore, destination, safetyDeposit, bidder, payer, metadata, masterEdition, originalMint, transferAuthority, acceptPaymentAccount, tokenPaymentAccount, newMint, edition, winIndex, instructions) {\n  const PROGRAM_IDS = utils_1.programIds();\n  const store = PROGRAM_IDS.store;\n\n  if (!store) {\n    throw new Error('Store not initialized');\n  }\n\n  const {\n    auctionKey,\n    auctionManagerKey\n  } = await _1.getAuctionKeys(vault);\n  const auctionDataExtended = await actions_1.getAuctionExtended({\n    auctionProgramId: PROGRAM_IDS.auction,\n    resource: vault\n  });\n  const {\n    bidRedemption,\n    bidMetadata\n  } = await _1.getBidderKeys(auctionKey, bidder);\n  const prizeTrackingTicket = await _1.getPrizeTrackingTicket(auctionManagerKey, originalMint);\n  const newMetadata = await actions_1.getMetadata(newMint);\n  const newEdition = await actions_1.getEdition(newMint);\n  const editionMarkPda = await actions_1.getEditionMarkPda(originalMint, edition);\n  const safetyDepositConfig = await _1.getSafetyDepositConfig(auctionManagerKey, safetyDeposit);\n  const value = new _1.RedeemParticipationBidV3Args({\n    winIndex\n  });\n  const data = Buffer.from(borsh_1.serialize(_1.SCHEMA, value));\n  const keys = [{\n    pubkey: utils_1.toPublicKey(auctionManagerKey),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(safetyDepositTokenStore),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(destination),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(bidRedemption),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(safetyDeposit),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(safetyDepositConfig),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(auctionKey),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(bidMetadata),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(bidder),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(payer),\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: PROGRAM_IDS.token,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(PROGRAM_IDS.vault),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(PROGRAM_IDS.metadata),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: store,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(transferAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(acceptPaymentAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(tokenPaymentAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(prizeTrackingTicket),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(newMetadata),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(newEdition),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(masterEdition),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(newMint),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(editionMarkPda),\n    isSigner: false,\n    isWritable: true\n  }, {\n    // Mint authority (this) is going to be the payer since the bidder\n    // may not be signer hre - we may be redeeming for someone else (permissionless)\n    // and during the txn, mint authority is removed from us and given to master edition.\n    // The ATA account is already owned by bidder by default. No signing needed\n    pubkey: utils_1.toPublicKey(payer),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(metadata),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(auctionDataExtended),\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(PROGRAM_IDS.metaplex),\n    data\n  }));\n}\n\nexports.redeemParticipationBidV3 = redeemParticipationBidV3;","map":{"version":3,"sources":["../../../../src/models/metaplex/redeemParticipationBidV3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.redeemParticipationBidV3 = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst borsh_1 = require(\"borsh\");\r\nconst _1 = require(\".\");\r\nconst actions_1 = require(\"../../actions\");\r\nconst utils_1 = require(\"../../utils\");\r\nasync function redeemParticipationBidV3(vault, safetyDepositTokenStore, destination, safetyDeposit, bidder, payer, metadata, masterEdition, originalMint, transferAuthority, acceptPaymentAccount, tokenPaymentAccount, newMint, edition, winIndex, instructions) {\r\n    const PROGRAM_IDS = utils_1.programIds();\r\n    const store = PROGRAM_IDS.store;\r\n    if (!store) {\r\n        throw new Error('Store not initialized');\r\n    }\r\n    const { auctionKey, auctionManagerKey } = await _1.getAuctionKeys(vault);\r\n    const auctionDataExtended = await actions_1.getAuctionExtended({\r\n        auctionProgramId: PROGRAM_IDS.auction,\r\n        resource: vault,\r\n    });\r\n    const { bidRedemption, bidMetadata } = await _1.getBidderKeys(auctionKey, bidder);\r\n    const prizeTrackingTicket = await _1.getPrizeTrackingTicket(auctionManagerKey, originalMint);\r\n    const newMetadata = await actions_1.getMetadata(newMint);\r\n    const newEdition = await actions_1.getEdition(newMint);\r\n    const editionMarkPda = await actions_1.getEditionMarkPda(originalMint, edition);\r\n    const safetyDepositConfig = await _1.getSafetyDepositConfig(auctionManagerKey, safetyDeposit);\r\n    const value = new _1.RedeemParticipationBidV3Args({ winIndex });\r\n    const data = Buffer.from(borsh_1.serialize(_1.SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(auctionManagerKey),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(safetyDepositTokenStore),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(destination),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(bidRedemption),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(safetyDeposit),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(safetyDepositConfig),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(auctionKey),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(bidMetadata),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(bidder),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(payer),\r\n            isSigner: true,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: PROGRAM_IDS.token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(PROGRAM_IDS.vault),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(PROGRAM_IDS.metadata),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: store,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(transferAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(acceptPaymentAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(tokenPaymentAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(prizeTrackingTicket),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(newMetadata),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(newEdition),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(masterEdition),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(newMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(editionMarkPda),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            // Mint authority (this) is going to be the payer since the bidder\r\n            // may not be signer hre - we may be redeeming for someone else (permissionless)\r\n            // and during the txn, mint authority is removed from us and given to master edition.\r\n            // The ATA account is already owned by bidder by default. No signing needed\r\n            pubkey: utils_1.toPublicKey(payer),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(metadata),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(auctionDataExtended),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(PROGRAM_IDS.metaplex),\r\n        data,\r\n    }));\r\n}\r\nexports.redeemParticipationBidV3 = redeemParticipationBidV3;\r\n//# sourceMappingURL=redeemParticipationBidV3.js.map"]},"metadata":{},"sourceType":"script"}