{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diego\\\\metaplex\\\\js\\\\packages\\\\gumdrop\\\\src\\\\components\\\\DragAndDrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useColorMode } from \"../contexts/ColorModeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DragAndDrop = props => {\n  _s();\n\n  const dropRef = React.useRef(null);\n  const [dragCounter, setDragCounter] = React.useState(0);\n  const [dragging, setDragging] = React.useState(false);\n\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragIn = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragCounter(dragCounter + 1);\n\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragging(true);\n    }\n  };\n\n  const handleDragOut = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const remainingDrags = dragCounter - 1;\n    setDragCounter(remainingDrags);\n\n    if (remainingDrags === 0) {\n      setDragging(false);\n    }\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      props.handleDrop(e.dataTransfer.files);\n      e.dataTransfer.clearData();\n      setDragCounter(0);\n    }\n  };\n\n  React.useEffect(() => {\n    const node = dropRef.current;\n    if (node === null) return;\n    node.addEventListener(\"dragenter\", handleDragIn);\n    node.addEventListener(\"dragleave\", handleDragOut);\n    node.addEventListener(\"dragover\", handleDrag);\n    node.addEventListener(\"drop\", handleDrop);\n    return () => {\n      node.removeEventListener(\"dragenter\", handleDragIn);\n      node.removeEventListener(\"dragleave\", handleDragOut);\n      node.removeEventListener(\"dragover\", handleDrag);\n      node.removeEventListener(\"drop\", handleDrop);\n    };\n  });\n  const colorModeCtx = useColorMode();\n  const shade = colorModeCtx.mode === 'dark' ? \"rgba(255,255,255,.1)\" : \"rgba(0, 0, 0,.1)\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: dropRef,\n    style: dragging ? {\n      backgroundColor: shade\n    } : {},\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DragAndDrop, \"QJIejsEhgE2OPhvnnGZqyOwzwwE=\", false, function () {\n  return [useColorMode];\n});\n\n_c = DragAndDrop;\nexport default DragAndDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragAndDrop\");","map":{"version":3,"sources":["C:/Users/Diego/metaplex/js/packages/gumdrop/src/components/DragAndDrop.tsx"],"names":["React","useColorMode","DragAndDrop","props","dropRef","useRef","dragCounter","setDragCounter","useState","dragging","setDragging","handleDrag","e","preventDefault","stopPropagation","handleDragIn","dataTransfer","items","length","handleDragOut","remainingDrags","handleDrop","files","clearData","useEffect","node","current","addEventListener","removeEventListener","colorModeCtx","shade","mode","backgroundColor","children"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport {\r\n  useColorMode,\r\n} from \"../contexts/ColorModeContext\";\r\n\r\nexport const DragAndDrop = (\r\n  props : {\r\n    handleDrop : (files : FileList) => void,\r\n    children : React.ReactNode,\r\n  },\r\n) => {\r\n  const dropRef = React.useRef<HTMLDivElement>(null);\r\n  const [dragCounter, setDragCounter] = React.useState(0);\r\n  const [dragging, setDragging] = React.useState(false);\r\n\r\n  const handleDrag = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n  };\r\n\r\n  const handleDragIn = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n\r\n    setDragCounter(dragCounter + 1);\r\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\r\n      setDragging(true);\r\n    }\r\n  };\r\n\r\n  const handleDragOut = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n\r\n    const remainingDrags = dragCounter - 1;\r\n    setDragCounter(remainingDrags);\r\n    if (remainingDrags === 0) {\r\n      setDragging(false);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n\r\n    setDragging(false);\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      props.handleDrop(e.dataTransfer.files);\r\n      e.dataTransfer.clearData();\r\n      setDragCounter(0);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const node = dropRef.current;\r\n    if (node === null) return;\r\n    node.addEventListener(\"dragenter\" , handleDragIn);\r\n    node.addEventListener(\"dragleave\" , handleDragOut);\r\n    node.addEventListener(\"dragover\"  , handleDrag);\r\n    node.addEventListener(\"drop\"      , handleDrop);\r\n\r\n    return () => {\r\n      node.removeEventListener(\"dragenter\" , handleDragIn);\r\n      node.removeEventListener(\"dragleave\" , handleDragOut);\r\n      node.removeEventListener(\"dragover\"  , handleDrag);\r\n      node.removeEventListener(\"drop\"      , handleDrop);\r\n    };\r\n  });\r\n\r\n  const colorModeCtx = useColorMode();\r\n  const shade = colorModeCtx.mode === 'dark' ? \"rgba(255,255,255,.1)\" : \"rgba(0, 0, 0,.1)\";\r\n\r\n  return (\r\n    <div\r\n      ref={dropRef}\r\n      style={dragging ? { backgroundColor: shade} : {}}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default DragAndDrop;\r\n"]},"metadata":{},"sourceType":"module"}