{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMultipleAccounts = void 0;\n\nconst utils_1 = require(\"../../utils/utils\");\n\nconst getMultipleAccounts = async (connection, keys, commitment) => {\n  const result = await Promise.all(utils_1.chunks(keys, 99).map(chunk => getMultipleAccountsCore(connection, chunk, commitment)));\n  const array = result.map(a => a.array.map(acc => {\n    if (!acc) {\n      return undefined;\n    }\n\n    const {\n      data,\n      ...rest\n    } = acc;\n    const obj = { ...rest,\n      data: Buffer.from(data[0], 'base64')\n    };\n    return obj;\n  })).flat();\n  return {\n    keys,\n    array\n  };\n};\n\nexports.getMultipleAccounts = getMultipleAccounts;\n\nconst getMultipleAccountsCore = async (connection, keys, commitment) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n\n  if (unsafeRes.error) {\n    throw new Error('failed to get info about account ' + unsafeRes.error.message);\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value;\n    return {\n      keys,\n      array\n    };\n  } // TODO: fix\n\n\n  throw new Error();\n};","map":{"version":3,"sources":["../../../../src/contexts/accounts/getMultipleAccounts.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEO,MAAM,mBAAmB,GAAG,OACjC,UADiC,EAEjC,IAFiC,EAGjC,UAHiC,KAI/B;AACF,QAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAR,CACnB,OAAA,CAAA,MAAA,CAAO,IAAP,EAAa,EAAb,EAAiB,GAAjB,CAAqB,KAAK,IACxB,uBAAuB,CAAC,UAAD,EAAa,KAAb,EAAoB,UAApB,CADzB,CADmB,CAArB;AAMA,QAAM,KAAK,GAAG,MAAM,CACjB,GADW,CAEV,CAAC,IACC,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAY,GAAG,IAAG;AAChB,QAAI,CAAC,GAAL,EAAU;AACR,aAAO,SAAP;AACD;;AAED,UAAM;AAAE,MAAA,IAAF;AAAQ,SAAG;AAAX,QAAoB,GAA1B;AACA,UAAM,GAAG,GAAG,EACV,GAAG,IADO;AAEV,MAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB;AAFI,KAAZ;AAIA,WAAO,GAAP;AACD,GAXD,CAHQ,EAgBX,IAhBW,EAAd;AAiBA,SAAO;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,GAAP;AACD,CA7BM;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB;;AA+Bb,MAAM,uBAAuB,GAAG,OAC9B,UAD8B,EAE9B,IAF8B,EAG9B,UAH8B,KAI5B;AACF,QAAM,IAAI,GAAG,UAAU,CAAC,UAAX,CAAsB,CAAC,IAAD,CAAtB,EAA8B,UAA9B,EAA0C,QAA1C,CAAb;;AAEA,QAAM,SAAS,GAAG,MAAM,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAAxB;;AACA,MAAI,SAAS,CAAC,KAAd,EAAqB;AACnB,UAAM,IAAI,KAAJ,CACJ,sCAAsC,SAAS,CAAC,KAAV,CAAgB,OADlD,CAAN;AAGD;;AAED,MAAI,SAAS,CAAC,MAAV,CAAiB,KAArB,EAA4B;AAC1B,UAAM,KAAK,GAAG,SAAS,CAAC,MAAV,CAAiB,KAA/B;AACA,WAAO;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR,KAAP;AACD,GAbC,CAeF;;;AACA,QAAM,IAAI,KAAJ,EAAN;AACD,CArBD","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getMultipleAccounts = void 0;\r\nconst utils_1 = require(\"../../utils/utils\");\r\nconst getMultipleAccounts = async (connection, keys, commitment) => {\r\n    const result = await Promise.all(utils_1.chunks(keys, 99).map(chunk => getMultipleAccountsCore(connection, chunk, commitment)));\r\n    const array = result\r\n        .map(a => a.array.map(acc => {\r\n        if (!acc) {\r\n            return undefined;\r\n        }\r\n        const { data, ...rest } = acc;\r\n        const obj = {\r\n            ...rest,\r\n            data: Buffer.from(data[0], 'base64'),\r\n        };\r\n        return obj;\r\n    }))\r\n        .flat();\r\n    return { keys, array };\r\n};\r\nexports.getMultipleAccounts = getMultipleAccounts;\r\nconst getMultipleAccountsCore = async (connection, keys, commitment) => {\r\n    const args = connection._buildArgs([keys], commitment, 'base64');\r\n    const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\r\n    if (unsafeRes.error) {\r\n        throw new Error('failed to get info about account ' + unsafeRes.error.message);\r\n    }\r\n    if (unsafeRes.result.value) {\r\n        const array = unsafeRes.result.value;\r\n        return { keys, array };\r\n    }\r\n    // TODO: fix\r\n    throw new Error();\r\n};\r\n//# sourceMappingURL=getMultipleAccounts.js.map"]},"metadata":{},"sourceType":"script"}