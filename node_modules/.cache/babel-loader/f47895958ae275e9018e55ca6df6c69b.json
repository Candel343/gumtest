{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSafetyDepositBoxAddress = exports.updateExternalPriceAccount = exports.withdrawTokenFromSafetyDepositBox = exports.combineVault = exports.activateVault = exports.addTokenToInactiveVault = exports.getSafetyDepositBox = exports.initVault = exports.setVaultAuthority = exports.decodeSafetyDeposit = exports.decodeExternalPriceAccount = exports.decodeVault = exports.VAULT_SCHEMA = exports.ExternalPriceAccount = exports.SafetyDepositBox = exports.Vault = exports.MAX_EXTERNAL_ACCOUNT_SIZE = exports.MAX_VAULT_SIZE = exports.VaultState = exports.VaultKey = exports.VAULT_PREFIX = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst programIds_1 = require(\"../utils/programIds\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst utils_1 = require(\"../utils\");\n\nexports.VAULT_PREFIX = 'vault';\nvar VaultKey;\n\n(function (VaultKey) {\n  VaultKey[VaultKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  VaultKey[VaultKey[\"VaultV1\"] = 3] = \"VaultV1\";\n  VaultKey[VaultKey[\"SafetyDepositBoxV1\"] = 1] = \"SafetyDepositBoxV1\";\n  VaultKey[VaultKey[\"ExternalPriceAccountV1\"] = 2] = \"ExternalPriceAccountV1\";\n})(VaultKey = exports.VaultKey || (exports.VaultKey = {}));\n\nvar VaultState;\n\n(function (VaultState) {\n  VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\n  VaultState[VaultState[\"Active\"] = 1] = \"Active\";\n  VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\n  VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\n\nexports.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\nexports.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;\n\nclass Vault {\n  constructor(args) {\n    this.key = VaultKey.VaultV1;\n    this.tokenProgram = args.tokenProgram;\n    this.fractionMint = args.fractionMint;\n    this.authority = args.authority;\n    this.fractionTreasury = args.fractionTreasury;\n    this.redeemTreasury = args.redeemTreasury;\n    this.allowFurtherShareCreation = args.allowFurtherShareCreation;\n    this.pricingLookupAddress = args.pricingLookupAddress;\n    this.tokenTypeCount = args.tokenTypeCount;\n    this.state = args.state;\n    this.lockedPricePerShare = args.lockedPricePerShare;\n  }\n\n}\n\nexports.Vault = Vault;\n\nclass SafetyDepositBox {\n  constructor(args) {\n    this.key = VaultKey.SafetyDepositBoxV1;\n    this.vault = args.vault;\n    this.tokenMint = args.tokenMint;\n    this.store = args.store;\n    this.order = args.order;\n  }\n\n}\n\nexports.SafetyDepositBox = SafetyDepositBox;\n\nclass ExternalPriceAccount {\n  constructor(args) {\n    this.key = VaultKey.ExternalPriceAccountV1;\n    this.pricePerShare = args.pricePerShare;\n    this.priceMint = args.priceMint;\n    this.allowedToCombine = args.allowedToCombine;\n  }\n\n}\n\nexports.ExternalPriceAccount = ExternalPriceAccount;\n\nclass InitVaultArgs {\n  constructor(args) {\n    this.instruction = 0;\n    this.allowFurtherShareCreation = false;\n    this.allowFurtherShareCreation = args.allowFurtherShareCreation;\n  }\n\n}\n\nclass AmountArgs {\n  constructor(args) {\n    this.instruction = args.instruction;\n    this.amount = args.amount;\n  }\n\n}\n\nclass NumberOfShareArgs {\n  constructor(args) {\n    this.instruction = args.instruction;\n    this.numberOfShares = args.numberOfShares;\n  }\n\n}\n\nclass UpdateExternalPriceAccountArgs {\n  constructor(args) {\n    this.instruction = 9;\n    this.externalPriceAccount = args.externalPriceAccount;\n  }\n\n}\n\nexports.VAULT_SCHEMA = new Map([[InitVaultArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['allowFurtherShareCreation', 'u8']]\n}], [AmountArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['amount', 'u64']]\n}], [NumberOfShareArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['numberOfShares', 'u64']]\n}], [UpdateExternalPriceAccountArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['externalPriceAccount', ExternalPriceAccount]]\n}], [Vault, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['tokenProgram', 'pubkeyAsString'], ['fractionMint', 'pubkeyAsString'], ['authority', 'pubkeyAsString'], ['fractionTreasury', 'pubkeyAsString'], ['redeemTreasury', 'pubkeyAsString'], ['allowFurtherShareCreation', 'u8'], ['pricingLookupAddress', 'pubkeyAsString'], ['tokenTypeCount', 'u8'], ['state', 'u8'], ['lockedPricePerShare', 'u64']]\n}], [SafetyDepositBox, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['vault', 'pubkeyAsString'], ['tokenMint', 'pubkeyAsString'], ['store', 'pubkeyAsString'], ['order', 'u8']]\n}], [ExternalPriceAccount, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['pricePerShare', 'u64'], ['priceMint', 'pubkeyAsString'], ['allowedToCombine', 'u8']]\n}]]);\n\nconst decodeVault = buffer => {\n  return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, Vault, buffer);\n};\n\nexports.decodeVault = decodeVault;\n\nconst decodeExternalPriceAccount = buffer => {\n  return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, ExternalPriceAccount, buffer);\n};\n\nexports.decodeExternalPriceAccount = decodeExternalPriceAccount;\n\nconst decodeSafetyDeposit = buffer => {\n  return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, SafetyDepositBox, buffer);\n};\n\nexports.decodeSafetyDeposit = decodeSafetyDeposit;\n\nasync function setVaultAuthority(vault, currentAuthority, newAuthority, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const data = Buffer.from([10]);\n  const keys = [{\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(currentAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(newAuthority),\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data: data\n  }));\n}\n\nexports.setVaultAuthority = setVaultAuthority;\n\nasync function initVault(allowFurtherShareCreation, fractionalMint, redeemTreasury, fractionalTreasury, vault, vaultAuthority, pricingLookupAddress, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, new InitVaultArgs({\n    allowFurtherShareCreation\n  })));\n  const keys = [{\n    pubkey: utils_1.toPublicKey(fractionalMint),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(redeemTreasury),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionalTreasury),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vaultAuthority),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(pricingLookupAddress),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programIds_1.programIds().token,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data: data\n  }));\n}\n\nexports.initVault = initVault;\n\nasync function getSafetyDepositBox(vault, tokenMint) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  return (await utils_1.findProgramAddress([Buffer.from(exports.VAULT_PREFIX), utils_1.toPublicKey(vault).toBuffer(), utils_1.toPublicKey(tokenMint).toBuffer()], utils_1.toPublicKey(vaultProgramId)))[0];\n}\n\nexports.getSafetyDepositBox = getSafetyDepositBox;\n\nasync function addTokenToInactiveVault(amount, tokenMint, tokenAccount, tokenStoreAccount, vault, vaultAuthority, payer, transferAuthority, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const safetyDepositBox = await getSafetyDepositBox(vault, tokenMint);\n  const value = new AmountArgs({\n    instruction: 1,\n    amount\n  });\n  const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\n  const keys = [{\n    pubkey: utils_1.toPublicKey(safetyDepositBox),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(tokenAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(tokenStoreAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vaultAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(payer),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(transferAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: programIds_1.programIds().token,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data\n  }));\n}\n\nexports.addTokenToInactiveVault = addTokenToInactiveVault;\n\nasync function activateVault(numberOfShares, vault, fractionMint, fractionTreasury, vaultAuthority, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const fractionMintAuthority = (await utils_1.findProgramAddress([Buffer.from(exports.VAULT_PREFIX), utils_1.toPublicKey(vaultProgramId).toBuffer(), utils_1.toPublicKey(vault).toBuffer()], utils_1.toPublicKey(vaultProgramId)))[0];\n  const value = new NumberOfShareArgs({\n    instruction: 2,\n    numberOfShares\n  });\n  const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\n  const keys = [{\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionMint),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionTreasury),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionMintAuthority),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(vaultAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: programIds_1.programIds().token,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data\n  }));\n}\n\nexports.activateVault = activateVault;\n\nasync function combineVault(vault, outstandingShareTokenAccount, payingTokenAccount, fractionMint, fractionTreasury, redeemTreasury, newVaultAuthority, vaultAuthority, transferAuthority, externalPriceAccount, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const burnAuthority = (await utils_1.findProgramAddress([Buffer.from(exports.VAULT_PREFIX), utils_1.toPublicKey(vaultProgramId).toBuffer(), utils_1.toPublicKey(vault).toBuffer()], utils_1.toPublicKey(vaultProgramId)))[0];\n  const data = Buffer.from([3]);\n  const keys = [{\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(outstandingShareTokenAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(payingTokenAccount),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionMint),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionTreasury),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(redeemTreasury),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(newVaultAuthority || vaultAuthority),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(vaultAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(transferAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(burnAuthority),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(externalPriceAccount),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programIds_1.programIds().token,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data\n  }));\n}\n\nexports.combineVault = combineVault;\n\nasync function withdrawTokenFromSafetyDepositBox(amount, destination, safetyDepositBox, storeKey, vault, fractionMint, vaultAuthority, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const transferAuthority = (await utils_1.findProgramAddress([Buffer.from(exports.VAULT_PREFIX), utils_1.toPublicKey(vaultProgramId).toBuffer(), utils_1.toPublicKey(vault).toBuffer()], utils_1.toPublicKey(vaultProgramId)))[0];\n  const value = new AmountArgs({\n    instruction: 5,\n    amount\n  });\n  const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\n  const keys = [{\n    pubkey: utils_1.toPublicKey(destination),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(safetyDepositBox),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(storeKey),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vault),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(fractionMint),\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: utils_1.toPublicKey(vaultAuthority),\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: utils_1.toPublicKey(transferAuthority),\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programIds_1.programIds().token,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data\n  }));\n}\n\nexports.withdrawTokenFromSafetyDepositBox = withdrawTokenFromSafetyDepositBox;\n\nasync function updateExternalPriceAccount(externalPriceAccountKey, externalPriceAccount, instructions) {\n  const vaultProgramId = programIds_1.programIds().vault;\n  const value = new UpdateExternalPriceAccountArgs({\n    externalPriceAccount\n  });\n  const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\n  console.log('Data', data);\n  const keys = [{\n    pubkey: utils_1.toPublicKey(externalPriceAccountKey),\n    isSigner: false,\n    isWritable: true\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys,\n    programId: utils_1.toPublicKey(vaultProgramId),\n    data\n  }));\n}\n\nexports.updateExternalPriceAccount = updateExternalPriceAccount;\n\nasync function getSafetyDepositBoxAddress(vault, tokenMint) {\n  const PROGRAM_IDS = programIds_1.programIds();\n  return (await utils_1.findProgramAddress([Buffer.from(exports.VAULT_PREFIX), utils_1.toPublicKey(vault).toBuffer(), utils_1.toPublicKey(tokenMint).toBuffer()], utils_1.toPublicKey(PROGRAM_IDS.vault)))[0];\n}\n\nexports.getSafetyDepositBoxAddress = getSafetyDepositBoxAddress;","map":{"version":3,"sources":["../../../src/actions/vault.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getSafetyDepositBoxAddress = exports.updateExternalPriceAccount = exports.withdrawTokenFromSafetyDepositBox = exports.combineVault = exports.activateVault = exports.addTokenToInactiveVault = exports.getSafetyDepositBox = exports.initVault = exports.setVaultAuthority = exports.decodeSafetyDeposit = exports.decodeExternalPriceAccount = exports.decodeVault = exports.VAULT_SCHEMA = exports.ExternalPriceAccount = exports.SafetyDepositBox = exports.Vault = exports.MAX_EXTERNAL_ACCOUNT_SIZE = exports.MAX_VAULT_SIZE = exports.VaultState = exports.VaultKey = exports.VAULT_PREFIX = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst programIds_1 = require(\"../utils/programIds\");\r\nconst borsh_1 = require(\"borsh\");\r\nconst utils_1 = require(\"../utils\");\r\nexports.VAULT_PREFIX = 'vault';\r\nvar VaultKey;\r\n(function (VaultKey) {\r\n    VaultKey[VaultKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\r\n    VaultKey[VaultKey[\"VaultV1\"] = 3] = \"VaultV1\";\r\n    VaultKey[VaultKey[\"SafetyDepositBoxV1\"] = 1] = \"SafetyDepositBoxV1\";\r\n    VaultKey[VaultKey[\"ExternalPriceAccountV1\"] = 2] = \"ExternalPriceAccountV1\";\r\n})(VaultKey = exports.VaultKey || (exports.VaultKey = {}));\r\nvar VaultState;\r\n(function (VaultState) {\r\n    VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\r\n    VaultState[VaultState[\"Active\"] = 1] = \"Active\";\r\n    VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\r\n    VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\r\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\r\nexports.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\r\nexports.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;\r\nclass Vault {\r\n    constructor(args) {\r\n        this.key = VaultKey.VaultV1;\r\n        this.tokenProgram = args.tokenProgram;\r\n        this.fractionMint = args.fractionMint;\r\n        this.authority = args.authority;\r\n        this.fractionTreasury = args.fractionTreasury;\r\n        this.redeemTreasury = args.redeemTreasury;\r\n        this.allowFurtherShareCreation = args.allowFurtherShareCreation;\r\n        this.pricingLookupAddress = args.pricingLookupAddress;\r\n        this.tokenTypeCount = args.tokenTypeCount;\r\n        this.state = args.state;\r\n        this.lockedPricePerShare = args.lockedPricePerShare;\r\n    }\r\n}\r\nexports.Vault = Vault;\r\nclass SafetyDepositBox {\r\n    constructor(args) {\r\n        this.key = VaultKey.SafetyDepositBoxV1;\r\n        this.vault = args.vault;\r\n        this.tokenMint = args.tokenMint;\r\n        this.store = args.store;\r\n        this.order = args.order;\r\n    }\r\n}\r\nexports.SafetyDepositBox = SafetyDepositBox;\r\nclass ExternalPriceAccount {\r\n    constructor(args) {\r\n        this.key = VaultKey.ExternalPriceAccountV1;\r\n        this.pricePerShare = args.pricePerShare;\r\n        this.priceMint = args.priceMint;\r\n        this.allowedToCombine = args.allowedToCombine;\r\n    }\r\n}\r\nexports.ExternalPriceAccount = ExternalPriceAccount;\r\nclass InitVaultArgs {\r\n    constructor(args) {\r\n        this.instruction = 0;\r\n        this.allowFurtherShareCreation = false;\r\n        this.allowFurtherShareCreation = args.allowFurtherShareCreation;\r\n    }\r\n}\r\nclass AmountArgs {\r\n    constructor(args) {\r\n        this.instruction = args.instruction;\r\n        this.amount = args.amount;\r\n    }\r\n}\r\nclass NumberOfShareArgs {\r\n    constructor(args) {\r\n        this.instruction = args.instruction;\r\n        this.numberOfShares = args.numberOfShares;\r\n    }\r\n}\r\nclass UpdateExternalPriceAccountArgs {\r\n    constructor(args) {\r\n        this.instruction = 9;\r\n        this.externalPriceAccount = args.externalPriceAccount;\r\n    }\r\n}\r\nexports.VAULT_SCHEMA = new Map([\r\n    [\r\n        InitVaultArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['allowFurtherShareCreation', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        AmountArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['amount', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        NumberOfShareArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['numberOfShares', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        UpdateExternalPriceAccountArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['externalPriceAccount', ExternalPriceAccount],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        Vault,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['tokenProgram', 'pubkeyAsString'],\r\n                ['fractionMint', 'pubkeyAsString'],\r\n                ['authority', 'pubkeyAsString'],\r\n                ['fractionTreasury', 'pubkeyAsString'],\r\n                ['redeemTreasury', 'pubkeyAsString'],\r\n                ['allowFurtherShareCreation', 'u8'],\r\n                ['pricingLookupAddress', 'pubkeyAsString'],\r\n                ['tokenTypeCount', 'u8'],\r\n                ['state', 'u8'],\r\n                ['lockedPricePerShare', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        SafetyDepositBox,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['vault', 'pubkeyAsString'],\r\n                ['tokenMint', 'pubkeyAsString'],\r\n                ['store', 'pubkeyAsString'],\r\n                ['order', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        ExternalPriceAccount,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['pricePerShare', 'u64'],\r\n                ['priceMint', 'pubkeyAsString'],\r\n                ['allowedToCombine', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n]);\r\nconst decodeVault = (buffer) => {\r\n    return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, Vault, buffer);\r\n};\r\nexports.decodeVault = decodeVault;\r\nconst decodeExternalPriceAccount = (buffer) => {\r\n    return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, ExternalPriceAccount, buffer);\r\n};\r\nexports.decodeExternalPriceAccount = decodeExternalPriceAccount;\r\nconst decodeSafetyDeposit = (buffer) => {\r\n    return borsh_1.deserializeUnchecked(exports.VAULT_SCHEMA, SafetyDepositBox, buffer);\r\n};\r\nexports.decodeSafetyDeposit = decodeSafetyDeposit;\r\nasync function setVaultAuthority(vault, currentAuthority, newAuthority, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const data = Buffer.from([10]);\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(currentAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(newAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data: data,\r\n    }));\r\n}\r\nexports.setVaultAuthority = setVaultAuthority;\r\nasync function initVault(allowFurtherShareCreation, fractionalMint, redeemTreasury, fractionalTreasury, vault, vaultAuthority, pricingLookupAddress, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, new InitVaultArgs({ allowFurtherShareCreation })));\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionalMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(redeemTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionalTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vaultAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(pricingLookupAddress),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: programIds_1.programIds().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data: data,\r\n    }));\r\n}\r\nexports.initVault = initVault;\r\nasync function getSafetyDepositBox(vault, tokenMint) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    return (await utils_1.findProgramAddress([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        utils_1.toPublicKey(vault).toBuffer(),\r\n        utils_1.toPublicKey(tokenMint).toBuffer(),\r\n    ], utils_1.toPublicKey(vaultProgramId)))[0];\r\n}\r\nexports.getSafetyDepositBox = getSafetyDepositBox;\r\nasync function addTokenToInactiveVault(amount, tokenMint, tokenAccount, tokenStoreAccount, vault, vaultAuthority, payer, transferAuthority, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const safetyDepositBox = await getSafetyDepositBox(vault, tokenMint);\r\n    const value = new AmountArgs({\r\n        instruction: 1,\r\n        amount,\r\n    });\r\n    const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(safetyDepositBox),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(tokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(tokenStoreAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(payer),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(transferAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: programIds_1.programIds().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.addTokenToInactiveVault = addTokenToInactiveVault;\r\nasync function activateVault(numberOfShares, vault, fractionMint, fractionTreasury, vaultAuthority, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const fractionMintAuthority = (await utils_1.findProgramAddress([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        utils_1.toPublicKey(vaultProgramId).toBuffer(),\r\n        utils_1.toPublicKey(vault).toBuffer(),\r\n    ], utils_1.toPublicKey(vaultProgramId)))[0];\r\n    const value = new NumberOfShareArgs({ instruction: 2, numberOfShares });\r\n    const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionMintAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: programIds_1.programIds().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.activateVault = activateVault;\r\nasync function combineVault(vault, outstandingShareTokenAccount, payingTokenAccount, fractionMint, fractionTreasury, redeemTreasury, newVaultAuthority, vaultAuthority, transferAuthority, externalPriceAccount, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const burnAuthority = (await utils_1.findProgramAddress([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        utils_1.toPublicKey(vaultProgramId).toBuffer(),\r\n        utils_1.toPublicKey(vault).toBuffer(),\r\n    ], utils_1.toPublicKey(vaultProgramId)))[0];\r\n    const data = Buffer.from([3]);\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(outstandingShareTokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(payingTokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(redeemTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(newVaultAuthority || vaultAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(transferAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(burnAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(externalPriceAccount),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: programIds_1.programIds().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.combineVault = combineVault;\r\nasync function withdrawTokenFromSafetyDepositBox(amount, destination, safetyDepositBox, storeKey, vault, fractionMint, vaultAuthority, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const transferAuthority = (await utils_1.findProgramAddress([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        utils_1.toPublicKey(vaultProgramId).toBuffer(),\r\n        utils_1.toPublicKey(vault).toBuffer(),\r\n    ], utils_1.toPublicKey(vaultProgramId)))[0];\r\n    const value = new AmountArgs({ instruction: 5, amount });\r\n    const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(destination),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(safetyDepositBox),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(storeKey),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: utils_1.toPublicKey(transferAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: programIds_1.programIds().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.withdrawTokenFromSafetyDepositBox = withdrawTokenFromSafetyDepositBox;\r\nasync function updateExternalPriceAccount(externalPriceAccountKey, externalPriceAccount, instructions) {\r\n    const vaultProgramId = programIds_1.programIds().vault;\r\n    const value = new UpdateExternalPriceAccountArgs({ externalPriceAccount });\r\n    const data = Buffer.from(borsh_1.serialize(exports.VAULT_SCHEMA, value));\r\n    console.log('Data', data);\r\n    const keys = [\r\n        {\r\n            pubkey: utils_1.toPublicKey(externalPriceAccountKey),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: utils_1.toPublicKey(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.updateExternalPriceAccount = updateExternalPriceAccount;\r\nasync function getSafetyDepositBoxAddress(vault, tokenMint) {\r\n    const PROGRAM_IDS = programIds_1.programIds();\r\n    return (await utils_1.findProgramAddress([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        utils_1.toPublicKey(vault).toBuffer(),\r\n        utils_1.toPublicKey(tokenMint).toBuffer(),\r\n    ], utils_1.toPublicKey(PROGRAM_IDS.vault)))[0];\r\n}\r\nexports.getSafetyDepositBoxAddress = getSafetyDepositBoxAddress;\r\n//# sourceMappingURL=vault.js.map"]},"metadata":{},"sourceType":"script"}