{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenericAccountParser = exports.TokenAccountParser = exports.MintParser = void 0;\n\nconst deserialize_1 = require(\"./deserialize\");\n\nconst MintParser = (pubKey, info) => {\n  const buffer = Buffer.from(info.data);\n  const data = deserialize_1.deserializeMint(buffer);\n  const details = {\n    pubkey: pubKey,\n    account: { ...info\n    },\n    info: data\n  };\n  return details;\n};\n\nexports.MintParser = MintParser;\n\nconst TokenAccountParser = (pubKey, info) => {\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\n  // triggers an update over wss which triggers this guy to get called\n  // since your UI already logged that pubkey as a token account. Check for length.\n  if (info.data.length > 0) {\n    const buffer = Buffer.from(info.data);\n    const data = deserialize_1.deserializeAccount(buffer);\n    const details = {\n      pubkey: pubKey,\n      account: { ...info\n      },\n      info: data\n    };\n    return details;\n  }\n};\n\nexports.TokenAccountParser = TokenAccountParser;\n\nconst GenericAccountParser = (pubKey, info) => {\n  const buffer = Buffer.from(info.data);\n  const details = {\n    pubkey: pubKey,\n    account: { ...info\n    },\n    info: buffer\n  };\n  return details;\n};\n\nexports.GenericAccountParser = GenericAccountParser;","map":{"version":3,"sources":["../../../../src/contexts/accounts/parsesrs.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGO,MAAM,UAAU,GAAG,CACxB,MADwB,EAExB,IAFwB,KAGtB;AACF,QAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,IAAjB,CAAf;AAEA,QAAM,IAAI,GAAG,aAAA,CAAA,eAAA,CAAgB,MAAhB,CAAb;AAEA,QAAM,OAAO,GAAG;AACd,IAAA,MAAM,EAAE,MADM;AAEd,IAAA,OAAO,EAAE,EACP,GAAG;AADI,KAFK;AAKd,IAAA,IAAI,EAAE;AALQ,GAAhB;AAQA,SAAO,OAAP;AACD,CAjBM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV;;AAmBN,MAAM,kBAAkB,GAAG,CAChC,MADgC,EAEhC,IAFgC,KAG9B;AACF;AACA;AACA;AACA,MAAI,IAAI,CAAC,IAAL,CAAU,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,IAAjB,CAAf;AACA,UAAM,IAAI,GAAG,aAAA,CAAA,kBAAA,CAAmB,MAAnB,CAAb;AAEA,UAAM,OAAO,GAAG;AACd,MAAA,MAAM,EAAE,MADM;AAEd,MAAA,OAAO,EAAE,EACP,GAAG;AADI,OAFK;AAKd,MAAA,IAAI,EAAE;AALQ,KAAhB;AAQA,WAAO,OAAP;AACD;AACF,CArBM;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB;;AAuBN,MAAM,oBAAoB,GAAG,CAClC,MADkC,EAElC,IAFkC,KAGhC;AACF,QAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,IAAjB,CAAf;AAEA,QAAM,OAAO,GAAG;AACd,IAAA,MAAM,EAAE,MADM;AAEd,IAAA,OAAO,EAAE,EACP,GAAG;AADI,KAFK;AAKd,IAAA,IAAI,EAAE;AALQ,GAAhB;AAQA,SAAO,OAAP;AACD,CAfM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GenericAccountParser = exports.TokenAccountParser = exports.MintParser = void 0;\r\nconst deserialize_1 = require(\"./deserialize\");\r\nconst MintParser = (pubKey, info) => {\r\n    const buffer = Buffer.from(info.data);\r\n    const data = deserialize_1.deserializeMint(buffer);\r\n    const details = {\r\n        pubkey: pubKey,\r\n        account: {\r\n            ...info,\r\n        },\r\n        info: data,\r\n    };\r\n    return details;\r\n};\r\nexports.MintParser = MintParser;\r\nconst TokenAccountParser = (pubKey, info) => {\r\n    // Sometimes a wrapped sol account gets closed, goes to 0 length,\r\n    // triggers an update over wss which triggers this guy to get called\r\n    // since your UI already logged that pubkey as a token account. Check for length.\r\n    if (info.data.length > 0) {\r\n        const buffer = Buffer.from(info.data);\r\n        const data = deserialize_1.deserializeAccount(buffer);\r\n        const details = {\r\n            pubkey: pubKey,\r\n            account: {\r\n                ...info,\r\n            },\r\n            info: data,\r\n        };\r\n        return details;\r\n    }\r\n};\r\nexports.TokenAccountParser = TokenAccountParser;\r\nconst GenericAccountParser = (pubKey, info) => {\r\n    const buffer = Buffer.from(info.data);\r\n    const details = {\r\n        pubkey: pubKey,\r\n        account: {\r\n            ...info,\r\n        },\r\n        info: buffer,\r\n    };\r\n    return details;\r\n};\r\nexports.GenericAccountParser = GenericAccountParser;\r\n//# sourceMappingURL=parsesrs.js.map"]},"metadata":{},"sourceType":"script"}