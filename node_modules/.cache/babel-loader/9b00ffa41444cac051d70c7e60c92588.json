{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.programIds = exports.setProgramIds = exports.getStoreID = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst ids_1 = require(\"./ids\");\n\nconst getStoreID = async storeOwnerAddress => {\n  if (!storeOwnerAddress) {\n    return undefined;\n  }\n\n  console.log('Store owner', storeOwnerAddress, ids_1.METAPLEX_ID);\n  const programs = await utils_1.findProgramAddress([Buffer.from('metaplex'), ids_1.toPublicKey(ids_1.METAPLEX_ID).toBuffer(), ids_1.toPublicKey(storeOwnerAddress).toBuffer()], ids_1.toPublicKey(ids_1.METAPLEX_ID));\n  const storeAddress = programs[0];\n  return storeAddress;\n};\n\nexports.getStoreID = getStoreID;\n\nconst setProgramIds = async store => {\n  STORE = store ? ids_1.toPublicKey(store) : undefined;\n};\n\nexports.setProgramIds = setProgramIds;\nlet STORE;\n\nconst programIds = () => {\n  return {\n    token: ids_1.TOKEN_PROGRAM_ID,\n    associatedToken: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: ids_1.BPF_UPGRADE_LOADER_ID,\n    system: ids_1.SYSTEM,\n    metadata: ids_1.METADATA_PROGRAM_ID,\n    memo: ids_1.MEMO_ID,\n    vault: ids_1.VAULT_ID,\n    auction: ids_1.AUCTION_ID,\n    metaplex: ids_1.METAPLEX_ID,\n    store: STORE\n  };\n};\n\nexports.programIds = programIds;","map":{"version":3,"sources":["../../../src/utils/programIds.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAaO,MAAM,UAAU,GAAG,MAAO,iBAAP,IAAqC;AAC7D,MAAI,CAAC,iBAAL,EAAwB;AACtB,WAAO,SAAP;AACD;;AAED,EAAA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,iBAA3B,EAA8C,KAAA,CAAA,WAA9C;AACA,QAAM,QAAQ,GAAG,MAAM,OAAA,CAAA,kBAAA,CACrB,CACE,MAAM,CAAC,IAAP,CAAY,UAAZ,CADF,EAEE,KAAA,CAAA,WAAA,CAAY,KAAA,CAAA,WAAZ,EAAyB,QAAzB,EAFF,EAGE,KAAA,CAAA,WAAA,CAAY,iBAAZ,EAA+B,QAA/B,EAHF,CADqB,EAMrB,KAAA,CAAA,WAAA,CAAY,KAAA,CAAA,WAAZ,CANqB,CAAvB;AAQA,QAAM,YAAY,GAAG,QAAQ,CAAC,CAAD,CAA7B;AAEA,SAAO,YAAP;AACD,CAjBM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV;;AAmBN,MAAM,aAAa,GAAG,MAAO,KAAP,IAAyB;AACpD,EAAA,KAAK,GAAG,KAAK,GAAG,KAAA,CAAA,WAAA,CAAY,KAAZ,CAAH,GAAwB,SAArC;AACD,CAFM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAIb,IAAI,KAAJ;;AAEO,MAAM,UAAU,GAAG,MAAK;AAC7B,SAAO;AACL,IAAA,KAAK,EAAE,KAAA,CAAA,gBADF;AAEL,IAAA,eAAe,EAAE,KAAA,CAAA,uCAFZ;AAGL,IAAA,kBAAkB,EAAE,KAAA,CAAA,qBAHf;AAIL,IAAA,MAAM,EAAE,KAAA,CAAA,MAJH;AAKL,IAAA,QAAQ,EAAE,KAAA,CAAA,mBALL;AAML,IAAA,IAAI,EAAE,KAAA,CAAA,OAND;AAOL,IAAA,KAAK,EAAE,KAAA,CAAA,QAPF;AAQL,IAAA,OAAO,EAAE,KAAA,CAAA,UARJ;AASL,IAAA,QAAQ,EAAE,KAAA,CAAA,WATL;AAUL,IAAA,KAAK,EAAE;AAVF,GAAP;AAYD,CAbM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.programIds = exports.setProgramIds = exports.getStoreID = void 0;\r\nconst utils_1 = require(\"../utils\");\r\nconst ids_1 = require(\"./ids\");\r\nconst getStoreID = async (storeOwnerAddress) => {\r\n    if (!storeOwnerAddress) {\r\n        return undefined;\r\n    }\r\n    console.log('Store owner', storeOwnerAddress, ids_1.METAPLEX_ID);\r\n    const programs = await utils_1.findProgramAddress([\r\n        Buffer.from('metaplex'),\r\n        ids_1.toPublicKey(ids_1.METAPLEX_ID).toBuffer(),\r\n        ids_1.toPublicKey(storeOwnerAddress).toBuffer(),\r\n    ], ids_1.toPublicKey(ids_1.METAPLEX_ID));\r\n    const storeAddress = programs[0];\r\n    return storeAddress;\r\n};\r\nexports.getStoreID = getStoreID;\r\nconst setProgramIds = async (store) => {\r\n    STORE = store ? ids_1.toPublicKey(store) : undefined;\r\n};\r\nexports.setProgramIds = setProgramIds;\r\nlet STORE;\r\nconst programIds = () => {\r\n    return {\r\n        token: ids_1.TOKEN_PROGRAM_ID,\r\n        associatedToken: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        bpf_upgrade_loader: ids_1.BPF_UPGRADE_LOADER_ID,\r\n        system: ids_1.SYSTEM,\r\n        metadata: ids_1.METADATA_PROGRAM_ID,\r\n        memo: ids_1.MEMO_ID,\r\n        vault: ids_1.VAULT_ID,\r\n        auction: ids_1.AUCTION_ID,\r\n        metaplex: ids_1.METAPLEX_ID,\r\n        store: STORE,\r\n    };\r\n};\r\nexports.programIds = programIds;\r\n//# sourceMappingURL=programIds.js.map"]},"metadata":{},"sourceType":"script"}