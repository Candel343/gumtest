{"ast":null,"code":"import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth();\n  var dayOfWeek = date.getUTCDay();\n  var dayOfMonthInt = date.getUTCDate();\n  var hoursInt = date.getUTCHours();\n  var minutesInt = date.getUTCMinutes();\n  var secondsInt = date.getUTCSeconds();\n  var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n  var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n  var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n  var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n  return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(?<Y>\\d{4})-(?<M>\\d{2})-(?<D>\\d{2})[tT](?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n\n  var match = RFC3339.exec(value);\n\n  if (!match || !match.groups) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n\n  var year = strictParseShort(stripLeadingZeroes(match.groups[\"Y\"]));\n  var month = parseDateValue(match.groups[\"M\"], \"month\", 1, 12);\n  var day = parseDateValue(match.groups[\"D\"], \"day\", 1, 31);\n  return buildDate(year, month, day, match);\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (?<D>\\d{2}) (?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?<Y>\\d{4}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (?<D>\\d{2})-(?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(?<Y>\\d{2}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?<D> [1-9]|\\d{2}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? (?<Y>\\d{4})$/);\nexport var parseRfc7231DateTime = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n  }\n\n  var dayFn = function (value) {\n    return parseDateValue(value, \"day\", 1, 31);\n  };\n\n  var yearFn = function (value) {\n    return strictParseShort(stripLeadingZeroes(value));\n  };\n\n  var dateAdjustmentFn = function (value) {\n    return value;\n  };\n\n  var match = IMF_FIXDATE.exec(value);\n\n  if (!match || !match.groups) {\n    match = RFC_850_DATE.exec(value);\n\n    if (match && match.groups) {\n      yearFn = parseTwoDigitYear;\n      dateAdjustmentFn = adjustRfc850Year;\n    } else {\n      match = ASC_TIME.exec(value);\n\n      if (match && match.groups) {\n        dayFn = function (value) {\n          return parseDateValue(value.trimLeft(), \"day\", 1, 31);\n        };\n      } else {\n        throw new TypeError(\"Invalid RFC-7231 date-time value\");\n      }\n    }\n  }\n\n  var year = yearFn(match.groups[\"Y\"]);\n  var month = parseMonthByShortName(match.groups[\"M\"]);\n  var day = dayFn(match.groups[\"D\"]);\n  return dateAdjustmentFn(buildDate(year, month, day, match));\n};\nexport var parseEpochTimestamp = function (value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var valueAsDouble;\n\n  if (typeof value === \"number\") {\n    valueAsDouble = value;\n  } else if (typeof value === \"string\") {\n    valueAsDouble = strictParseDouble(value);\n  } else {\n    throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n  }\n\n  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n    throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n  }\n\n  return new Date(Math.round(valueAsDouble * 1000));\n};\n\nvar buildDate = function (year, month, day, match) {\n  var adjustedMonth = month - 1;\n  validateDayOfMonth(year, adjustedMonth, day);\n  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(match.groups[\"H\"], \"hour\", 0, 23), parseDateValue(match.groups[\"m\"], \"minute\", 0, 59), parseDateValue(match.groups[\"s\"], \"seconds\", 0, 60), parseMilliseconds(match.groups[\"frac\"])));\n};\n\nvar parseTwoDigitYear = function (value) {\n  var thisYear = new Date().getUTCFullYear();\n  var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n\n  if (valueInThisCentury < thisYear) {\n    return valueInThisCentury + 100;\n  }\n\n  return valueInThisCentury;\n};\n\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\n\nvar adjustRfc850Year = function (input) {\n  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n  }\n\n  return input;\n};\n\nvar parseMonthByShortName = function (value) {\n  var monthIdx = MONTHS.indexOf(value);\n\n  if (monthIdx < 0) {\n    throw new TypeError(\"Invalid month: \" + value);\n  }\n\n  return monthIdx + 1;\n};\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nvar validateDayOfMonth = function (year, month, day) {\n  var maxDays = DAYS_IN_MONTH[month];\n\n  if (month === 1 && isLeapYear(year)) {\n    maxDays = 29;\n  }\n\n  if (day > maxDays) {\n    throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n  }\n};\n\nvar isLeapYear = function (year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\n\nvar parseDateValue = function (value, type, lower, upper) {\n  var dateVal = strictParseByte(stripLeadingZeroes(value));\n\n  if (dateVal < lower || dateVal > upper) {\n    throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n  }\n\n  return dateVal;\n};\n\nvar parseMilliseconds = function (value) {\n  if (value === null || value === undefined) {\n    return 0;\n  }\n\n  return strictParseFloat32(\"0.\" + value) * 1000;\n};\n\nvar stripLeadingZeroes = function (value) {\n  var idx = 0;\n\n  while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n    idx++;\n  }\n\n  if (idx === 0) {\n    return value;\n  }\n\n  return value.slice(idx);\n};","map":{"version":3,"sources":["C:/Users/Diego/metaplex/js/node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js"],"names":["strictParseByte","strictParseDouble","strictParseFloat32","strictParseShort","DAYS","MONTHS","dateToUtcString","date","year","getUTCFullYear","month","getUTCMonth","dayOfWeek","getUTCDay","dayOfMonthInt","getUTCDate","hoursInt","getUTCHours","minutesInt","getUTCMinutes","secondsInt","getUTCSeconds","dayOfMonthString","hoursString","minutesString","secondsString","RFC3339","RegExp","parseRfc3339DateTime","value","undefined","TypeError","match","exec","groups","stripLeadingZeroes","parseDateValue","day","buildDate","IMF_FIXDATE","RFC_850_DATE","ASC_TIME","parseRfc7231DateTime","dayFn","yearFn","dateAdjustmentFn","parseTwoDigitYear","adjustRfc850Year","trimLeft","parseMonthByShortName","parseEpochTimestamp","valueAsDouble","Number","isNaN","Infinity","Date","Math","round","adjustedMonth","validateDayOfMonth","UTC","parseMilliseconds","thisYear","valueInThisCentury","floor","FIFTY_YEARS_IN_MILLIS","input","getTime","getUTCMilliseconds","monthIdx","indexOf","DAYS_IN_MONTH","maxDays","isLeapYear","type","lower","upper","dateVal","idx","length","charAt","slice"],"mappings":"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","sourcesContent":["import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    var year = date.getUTCFullYear();\n    var month = date.getUTCMonth();\n    var dayOfWeek = date.getUTCDay();\n    var dayOfMonthInt = date.getUTCDate();\n    var hoursInt = date.getUTCHours();\n    var minutesInt = date.getUTCMinutes();\n    var secondsInt = date.getUTCSeconds();\n    var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n    var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n    var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n    var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n    return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(?<Y>\\d{4})-(?<M>\\d{2})-(?<D>\\d{2})[tT](?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    var match = RFC3339.exec(value);\n    if (!match || !match.groups) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    var year = strictParseShort(stripLeadingZeroes(match.groups[\"Y\"]));\n    var month = parseDateValue(match.groups[\"M\"], \"month\", 1, 12);\n    var day = parseDateValue(match.groups[\"D\"], \"day\", 1, 31);\n    return buildDate(year, month, day, match);\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (?<D>\\d{2}) (?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?<Y>\\d{4}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (?<D>\\d{2})-(?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(?<Y>\\d{2}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (?<M>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?<D> [1-9]|\\d{2}) (?<H>\\d{2}):(?<m>\\d{2}):(?<s>\\d{2})(?:\\.(?<frac>\\d+))? (?<Y>\\d{4})$/);\nexport var parseRfc7231DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    var dayFn = function (value) { return parseDateValue(value, \"day\", 1, 31); };\n    var yearFn = function (value) { return strictParseShort(stripLeadingZeroes(value)); };\n    var dateAdjustmentFn = function (value) { return value; };\n    var match = IMF_FIXDATE.exec(value);\n    if (!match || !match.groups) {\n        match = RFC_850_DATE.exec(value);\n        if (match && match.groups) {\n            yearFn = parseTwoDigitYear;\n            dateAdjustmentFn = adjustRfc850Year;\n        }\n        else {\n            match = ASC_TIME.exec(value);\n            if (match && match.groups) {\n                dayFn = function (value) { return parseDateValue(value.trimLeft(), \"day\", 1, 31); };\n            }\n            else {\n                throw new TypeError(\"Invalid RFC-7231 date-time value\");\n            }\n        }\n    }\n    var year = yearFn(match.groups[\"Y\"]);\n    var month = parseMonthByShortName(match.groups[\"M\"]);\n    var day = dayFn(match.groups[\"D\"]);\n    return dateAdjustmentFn(buildDate(year, month, day, match));\n};\nexport var parseEpochTimestamp = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nvar buildDate = function (year, month, day, match) {\n    var adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(match.groups[\"H\"], \"hour\", 0, 23), parseDateValue(match.groups[\"m\"], \"minute\", 0, 59), parseDateValue(match.groups[\"s\"], \"seconds\", 0, 60), parseMilliseconds(match.groups[\"frac\"])));\n};\nvar parseTwoDigitYear = function (value) {\n    var thisYear = new Date().getUTCFullYear();\n    var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nvar adjustRfc850Year = function (input) {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nvar parseMonthByShortName = function (value) {\n    var monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(\"Invalid month: \" + value);\n    }\n    return monthIdx + 1;\n};\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar validateDayOfMonth = function (year, month, day) {\n    var maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n    }\n};\nvar isLeapYear = function (year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nvar parseDateValue = function (value, type, lower, upper) {\n    var dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n    }\n    return dateVal;\n};\nvar parseMilliseconds = function (value) {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nvar stripLeadingZeroes = function (value) {\n    var idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n"]},"metadata":{},"sourceType":"module"}