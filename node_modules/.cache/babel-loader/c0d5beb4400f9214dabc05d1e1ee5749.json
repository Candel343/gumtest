{"ast":null,"code":"import log from 'loglevel';\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\";\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\nexport const formatDropMessage = (info, drop, html) => {\n  const wrap = (url, text) => {\n    if (html) {\n      return `<a href=\"${url}\">${text}</a>`;\n    } else {\n      return `${text} ${url}`;\n    }\n  };\n\n  if (drop.type === \"Token\") {\n    return {\n      subject: \"Gumdrop Token Drop\",\n      message: `You received ${info.amount} token(s) ` + `(click ${wrap(drop.meta, \"here\")} to view more information about the token mint). ` + wrap(info.url, \"Click here to claim them!\")\n    };\n  } else if (drop.type === \"Candy\") {\n    return {\n      subject: \"Gumdrop NFT Drop\",\n      message: `You received ${info.amount} Candy Machine pre-sale mint(s) ` + `(click ${wrap(drop.meta, \"here\")} to view the candy machine configuration on explorer). ` + wrap(info.url, \"Click here to claim them!\")\n    };\n  } else if (drop.type === \"Edition\") {\n    return {\n      subject: \"Gumdrop NFT Drop\",\n      message: `You received ${info.amount} limited-edition print(s) ` + `(click ${wrap(drop.meta, \"here\")} to view the master edition mint on explorer). ` + wrap(info.url, \"Click here to claim them!\")\n    };\n  } else {\n    throw new Error(`Internal Error: Unknown drop type ${drop.type}`);\n  }\n};\nexport const distributeAwsSns = async (auth, source, claimants, drop) => {\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\n    throw new Error(\"AWS SES auth keys not supplied\");\n  }\n\n  if (claimants.length === 0) return [];\n  log.debug(\"SES auth\", auth);\n  const client = new SNSClient({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: auth.accessKeyId,\n      secretAccessKey: auth.secretAccessKey\n    }\n  });\n\n  const single = async (info, drop) => {\n    const formatted = formatDropMessage(info, drop, true);\n    const message = {\n      Message: formatted.message,\n      PhoneNumber: info.handle\n    };\n\n    try {\n      const response = await client.send(new PublishCommand(message));\n      return {\n        status: \"success\",\n        handle: info.handle,\n        messageId: response.MessageId\n      };\n    } catch (err) {\n      return {\n        status: \"error\",\n        handle: info.handle,\n        error: err\n      };\n    }\n  };\n\n  const responses = Array();\n\n  for (const c of claimants) {\n    responses.push(await single(c, drop));\n  }\n\n  return responses;\n};\nexport const distributeAwsSes = async (auth, source, claimants, drop) => {\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\n    throw new Error(\"AWS SES auth keys not supplied\");\n  }\n\n  if (claimants.length === 0) return [];\n  log.debug(\"SES auth\", auth);\n  const client = new SESv2Client({\n    region: \"us-east-2\",\n    credentials: {\n      accessKeyId: auth.accessKeyId,\n      secretAccessKey: auth.secretAccessKey\n    }\n  }); // TODO: move to template + bulk message?\n\n  const single = async (info, drop) => {\n    const formatted = formatDropMessage(info, drop, true);\n    const message = {\n      Destination: {\n        ToAddresses: [info.handle]\n      },\n      Content: {\n        Simple: {\n          Subject: {\n            Data: formatted.subject,\n            Charset: \"utf-8\"\n          },\n          Body: {\n            Html: {\n              Data: formatted.message + \"<br><br>\" + \"<div>\" + \"If you would like to unsubscribe from new Gumdrops, \" + \"change your subscription preferences here: \" + \"<a href='{{amazonSESUnsubscribeUrl}}'>AWS subscription preferences</a>\" + \"</div>\",\n              Charset: \"utf-8\"\n            }\n          }\n        }\n      },\n      FromEmailAddress: source,\n      ListManagementOptions: {\n        ContactListName: \"Gumdrop\",\n        TopicName: drop.type\n      }\n    };\n\n    try {\n      const response = await client.send(new SendEmailCommand(message));\n      return {\n        status: \"success\",\n        handle: info.handle,\n        messageId: response.MessageId\n      };\n    } catch (err) {\n      return {\n        status: \"error\",\n        handle: info.handle,\n        error: err\n      };\n    }\n  };\n\n  const responses = Array();\n\n  for (const c of claimants) {\n    responses.push(await single(c, drop));\n  }\n\n  return responses;\n};\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nexport const distributeManual = async (auth, source, claimants, drop) => {\n  return Array();\n};\nexport const distributeWallet = async (auth, source, claimants, drop) => {\n  return Array();\n};\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nexport const urlAndHandleFor = claimants => {\n  return claimants.map(info => {\n    return {\n      handle: info.handle,\n      amount: info.amount,\n      url: info.url\n    };\n  });\n};","map":{"version":3,"sources":["C:/Users/Diego/metaplex/js/packages/gumdrop/src/utils/communication.ts"],"names":["log","SESv2Client","SendEmailCommand","SNSClient","PublishCommand","formatDropMessage","info","drop","html","wrap","url","text","type","subject","message","amount","meta","Error","distributeAwsSns","auth","source","claimants","accessKeyId","secretAccessKey","length","debug","client","region","credentials","single","formatted","Message","PhoneNumber","handle","response","send","status","messageId","MessageId","err","error","responses","Array","c","push","distributeAwsSes","Destination","ToAddresses","Content","Simple","Subject","Data","Charset","Body","Html","FromEmailAddress","ListManagementOptions","ContactListName","TopicName","distributeManual","distributeWallet","urlAndHandleFor","map"],"mappings":"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","sourcesContent":["import log from 'loglevel';\r\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\"\r\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\r\n\r\nimport {\r\n  ClaimantInfo,\r\n  Claimants,\r\n} from \"./claimant\"\r\n\r\nexport type AuthKeys = { [key: string] : string }\r\nexport type Response = { [key: string] : any }\r\n\r\nexport type DropInfo = {\r\n  type : string,\r\n  meta : string,\r\n};\r\n\r\nexport const formatDropMessage = (\r\n  info : ClaimantInfo,\r\n  drop : DropInfo,\r\n  html : boolean,\r\n) => {\r\n  const wrap = (url, text) => {\r\n    if (html) {\r\n      return `<a href=\"${url}\">${text}</a>`;\r\n    } else {\r\n      return `${text} ${url}`;\r\n    }\r\n  }\r\n  if (drop.type === \"Token\") {\r\n    return {\r\n      subject: \"Gumdrop Token Drop\",\r\n      message: `You received ${info.amount} token(s) `\r\n             + `(click ${wrap(drop.meta, \"here\")} to view more information about the token mint). `\r\n             +  wrap(info.url, \"Click here to claim them!\"),\r\n    };\r\n  } else if (drop.type === \"Candy\") {\r\n    return {\r\n      subject: \"Gumdrop NFT Drop\",\r\n      message: `You received ${info.amount} Candy Machine pre-sale mint(s) `\r\n             + `(click ${wrap(drop.meta, \"here\")} to view the candy machine configuration on explorer). `\r\n             +  wrap(info.url, \"Click here to claim them!\"),\r\n    };\r\n  } else if (drop.type === \"Edition\") {\r\n    return {\r\n      subject: \"Gumdrop NFT Drop\",\r\n      message: `You received ${info.amount} limited-edition print(s) `\r\n             + `(click ${wrap(drop.meta, \"here\")} to view the master edition mint on explorer). `\r\n             +  wrap(info.url, \"Click here to claim them!\"),\r\n    };\r\n  } else {\r\n    throw new Error(`Internal Error: Unknown drop type ${drop.type}`);\r\n  }\r\n};\r\n\r\nexport const distributeAwsSns = async (\r\n  auth : AuthKeys,\r\n  source : string,\r\n  claimants : Claimants,\r\n  drop : DropInfo,\r\n) => {\r\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\r\n    throw new Error(\"AWS SES auth keys not supplied\");\r\n  }\r\n  if (claimants.length === 0) return [];\r\n\r\n  log.debug(\"SES auth\", auth);\r\n  const client = new SNSClient({\r\n    region: \"us-east-2\",\r\n    credentials: {\r\n      accessKeyId: auth.accessKeyId,\r\n      secretAccessKey: auth.secretAccessKey,\r\n    },\r\n  });\r\n\r\n  const single = async (\r\n    info : ClaimantInfo,\r\n    drop : DropInfo,\r\n  ) => {\r\n    const formatted = formatDropMessage(info, drop, true);\r\n    const message = {\r\n      Message: formatted.message,\r\n      PhoneNumber: info.handle,\r\n    };\r\n\r\n    try {\r\n      const response = await client.send(new PublishCommand(message));\r\n      return {\r\n        status: \"success\",\r\n        handle: info.handle,\r\n        messageId: response.MessageId,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        status: \"error\",\r\n        handle: info.handle,\r\n        error: err,\r\n      };\r\n    }\r\n  };\r\n\r\n  const responses = Array<Response>();\r\n  for (const c of claimants) {\r\n    responses.push(await single(c, drop));\r\n  }\r\n  return responses;\r\n}\r\n\r\nexport const distributeAwsSes = async (\r\n  auth : AuthKeys,\r\n  source : string,\r\n  claimants : Claimants,\r\n  drop : DropInfo,\r\n) => {\r\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\r\n    throw new Error(\"AWS SES auth keys not supplied\");\r\n  }\r\n  if (claimants.length === 0) return [];\r\n\r\n  log.debug(\"SES auth\", auth);\r\n  const client = new SESv2Client({\r\n    region: \"us-east-2\",\r\n    credentials: {\r\n      accessKeyId: auth.accessKeyId,\r\n      secretAccessKey: auth.secretAccessKey,\r\n    },\r\n  });\r\n\r\n  // TODO: move to template + bulk message?\r\n  const single = async (\r\n    info : ClaimantInfo,\r\n    drop : DropInfo,\r\n  ) => {\r\n    const formatted = formatDropMessage(info, drop, true);\r\n    const message = {\r\n      Destination: {\r\n        ToAddresses: [\r\n          info.handle,\r\n        ]\r\n      },\r\n      Content: {\r\n        Simple: {\r\n          Subject: {\r\n            Data: formatted.subject,\r\n            Charset: \"utf-8\",\r\n          },\r\n          Body: {\r\n            Html: {\r\n              Data: formatted.message\r\n                + \"<br><br>\"\r\n                + \"<div>\"\r\n                +   \"If you would like to unsubscribe from new Gumdrops, \"\r\n                +   \"change your subscription preferences here: \"\r\n                +   \"<a href='{{amazonSESUnsubscribeUrl}}'>AWS subscription preferences</a>\"\r\n                + \"</div>\",\r\n              Charset: \"utf-8\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      FromEmailAddress: source,\r\n      ListManagementOptions: {\r\n        ContactListName: \"Gumdrop\",\r\n        TopicName: drop.type,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await client.send(new SendEmailCommand(message));\r\n      return {\r\n        status: \"success\",\r\n        handle: info.handle,\r\n        messageId: response.MessageId,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        status: \"error\",\r\n        handle: info.handle,\r\n        error: err,\r\n      };\r\n    }\r\n  };\r\n\r\n  const responses = Array<Response>();\r\n  for (const c of claimants) {\r\n    responses.push(await single(c, drop));\r\n  }\r\n  return responses;\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nexport const distributeManual = async (\r\n  auth : AuthKeys,\r\n  source : string,\r\n  claimants : Claimants,\r\n  drop : DropInfo,\r\n) => {\r\n  return Array<Response>();\r\n}\r\n\r\nexport const distributeWallet = async (\r\n  auth : AuthKeys,\r\n  source : string,\r\n  claimants : Claimants,\r\n  drop : DropInfo,\r\n) => {\r\n  return Array<Response>();\r\n}\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\nexport const urlAndHandleFor = (claimants : Array<ClaimantInfo>) => {\r\n  return claimants.map(info => {\r\n    return {\r\n      handle: info.handle,\r\n      amount: info.amount,\r\n      url: info.url,\r\n    };\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}