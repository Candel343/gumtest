{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"C:/Users/Diego/metaplex/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMeta = exports.MetaProvider = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar queryExtendedMetadata_1 = require(\"./queryExtendedMetadata\");\n\nvar subscribeAccountsChange_1 = require(\"./subscribeAccountsChange\");\n\nvar getEmptyMetaState_1 = require(\"./getEmptyMetaState\");\n\nvar loadAccounts_1 = require(\"./loadAccounts\");\n\nvar connection_1 = require(\"../connection\");\n\nvar store_1 = require(\"../store\");\n\nvar actions_1 = require(\"../../actions\");\n\nvar _1 = require(\".\");\n\nvar __1 = require(\"../..\");\n\nvar MetaContext = react_1.default.createContext(_objectSpread(_objectSpread({}, getEmptyMetaState_1.getEmptyMetaState()), {}, {\n  isLoading: false,\n  // @ts-ignore\n  update: function update() {\n    return [actions_1.AuctionData, actions_1.BidderMetadata, actions_1.BidderPot];\n  }\n}));\n\nfunction MetaProvider(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children;\n  var connection = connection_1.useConnection();\n\n  var _store_1$useStore = store_1.useStore(),\n      isReady = _store_1$useStore.isReady,\n      storeAddress = _store_1$useStore.storeAddress;\n\n  var _react_1$useState = react_1.useState(getEmptyMetaState_1.getEmptyMetaState()),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n      state = _react_1$useState2[0],\n      setState = _react_1$useState2[1];\n\n  var _react_1$useState3 = react_1.useState(0),\n      _react_1$useState4 = _slicedToArray(_react_1$useState3, 2),\n      page = _react_1$useState4[0],\n      setPage = _react_1$useState4[1];\n\n  var _react_1$useState5 = react_1.useState(false),\n      _react_1$useState6 = _slicedToArray(_react_1$useState5, 2),\n      metadataLoaded = _react_1$useState6[0],\n      setMetadataLoaded = _react_1$useState6[1];\n\n  var _react_1$useState7 = react_1.useState(0),\n      _react_1$useState8 = _slicedToArray(_react_1$useState7, 2),\n      lastLength = _react_1$useState8[0],\n      setLastLength = _react_1$useState8[1];\n\n  var _1$useUserAccounts = __1.useUserAccounts(),\n      userAccounts = _1$useUserAccounts.userAccounts;\n\n  var _react_1$useState9 = react_1.useState(true),\n      _react_1$useState10 = _slicedToArray(_react_1$useState9, 2),\n      isLoading = _react_1$useState10[0],\n      setIsLoading = _react_1$useState10[1];\n\n  var updateMints = react_1.useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(metadataByMint) {\n      var _yield$queryExtendedM, metadata, mintToMetadata;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return queryExtendedMetadata_1.queryExtendedMetadata(connection, metadataByMint);\n\n            case 3:\n              _yield$queryExtendedM = _context.sent;\n              metadata = _yield$queryExtendedM.metadata;\n              mintToMetadata = _yield$queryExtendedM.mintToMetadata;\n              setState(function (current) {\n                return _objectSpread(_objectSpread({}, current), {}, {\n                  metadata: metadata,\n                  metadataByMint: mintToMetadata\n                });\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [setState]);\n\n  function pullAllMetadata() {\n    return _pullAllMetadata.apply(this, arguments);\n  }\n\n  function _pullAllMetadata() {\n    _pullAllMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var nextState;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!isLoading) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 2:\n              if (storeAddress) {\n                _context2.next = 7;\n                break;\n              }\n\n              if (isReady) {\n                setIsLoading(false);\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              if (!state.store) {\n                setIsLoading(true);\n              }\n\n            case 8:\n              setIsLoading(true);\n              _context2.next = 11;\n              return _1.pullStoreMetadata(connection, state);\n\n            case 11:\n              nextState = _context2.sent;\n              setIsLoading(false);\n              setState(nextState);\n              _context2.next = 16;\n              return updateMints(nextState.metadataByMint);\n\n            case 16:\n              return _context2.abrupt(\"return\", []);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _pullAllMetadata.apply(this, arguments);\n  }\n\n  function pullBillingPage(_x2) {\n    return _pullBillingPage.apply(this, arguments);\n  }\n\n  function _pullBillingPage() {\n    _pullBillingPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(auctionAddress) {\n      var nextState;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!isLoading) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", false);\n\n            case 2:\n              if (storeAddress) {\n                _context3.next = 7;\n                break;\n              }\n\n              if (isReady) {\n                setIsLoading(false);\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 7:\n              if (!state.store) {\n                setIsLoading(true);\n              }\n\n            case 8:\n              _context3.next = 10;\n              return _1.pullAuctionSubaccounts(connection, auctionAddress, state);\n\n            case 10:\n              nextState = _context3.sent;\n              console.log('-----> Pulling all payout tickets');\n              _context3.next = 14;\n              return _1.pullPayoutTickets(connection, nextState);\n\n            case 14:\n              setState(nextState);\n              _context3.next = 17;\n              return updateMints(nextState.metadataByMint);\n\n            case 17:\n              return _context3.abrupt(\"return\", []);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _pullBillingPage.apply(this, arguments);\n  }\n\n  function pullAuctionPage(_x3) {\n    return _pullAuctionPage.apply(this, arguments);\n  }\n\n  function _pullAuctionPage() {\n    _pullAuctionPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(auctionAddress) {\n      var nextState;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!isLoading) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", state);\n\n            case 2:\n              if (storeAddress) {\n                _context4.next = 7;\n                break;\n              }\n\n              if (isReady) {\n                setIsLoading(false);\n              }\n\n              return _context4.abrupt(\"return\", state);\n\n            case 7:\n              if (!state.store) {\n                setIsLoading(true);\n              }\n\n            case 8:\n              _context4.next = 10;\n              return _1.pullAuctionSubaccounts(connection, auctionAddress, state);\n\n            case 10:\n              nextState = _context4.sent;\n              setState(nextState);\n              _context4.next = 14;\n              return updateMints(nextState.metadataByMint);\n\n            case 14:\n              return _context4.abrupt(\"return\", nextState);\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _pullAuctionPage.apply(this, arguments);\n  }\n\n  function pullAllSiteData() {\n    return _pullAllSiteData.apply(this, arguments);\n  }\n\n  function _pullAllSiteData() {\n    _pullAllSiteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var nextState;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!isLoading) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", state);\n\n            case 2:\n              if (storeAddress) {\n                _context5.next = 7;\n                break;\n              }\n\n              if (isReady) {\n                setIsLoading(false);\n              }\n\n              return _context5.abrupt(\"return\", state);\n\n            case 7:\n              if (!state.store) {\n                setIsLoading(true);\n              }\n\n            case 8:\n              console.log('------->Query started');\n              _context5.next = 11;\n              return loadAccounts_1.loadAccounts(connection);\n\n            case 11:\n              nextState = _context5.sent;\n              console.log('------->Query finished');\n              setState(nextState);\n              _context5.next = 16;\n              return updateMints(nextState.metadataByMint);\n\n            case 16:\n              return _context5.abrupt(\"return\");\n\n            case 17:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _pullAllSiteData.apply(this, arguments);\n  }\n\n  function update(_x4, _x5, _x6) {\n    return _update.apply(this, arguments);\n  }\n\n  function _update() {\n    _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(auctionAddress, bidderAddress, userTokenAccounts) {\n      var nextState, currMetadataLoaded, auction, billing, currLastLength, auctionBidderKey;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (storeAddress) {\n                _context6.next = 5;\n                break;\n              }\n\n              if (isReady) {\n                //@ts-ignore\n                window.loadingData = false;\n                setIsLoading(false);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 5:\n              if (!state.store) {\n                //@ts-ignore\n                window.loadingData = true;\n                setIsLoading(true);\n              }\n\n            case 6:\n              console.log('-----> Query started');\n              _context6.next = 9;\n              return _1.pullPage(connection, page, state);\n\n            case 9:\n              nextState = _context6.sent;\n\n              if (!nextState.storeIndexer.length) {\n                _context6.next = 49;\n                break;\n              }\n\n              if (!loadAccounts_1.USE_SPEED_RUN) {\n                _context6.next = 21;\n                break;\n              }\n\n              _context6.next = 14;\n              return loadAccounts_1.limitedLoadAccounts(connection);\n\n            case 14:\n              nextState = _context6.sent;\n              console.log('------->Query finished');\n              setState(nextState); //@ts-ignore\n\n              window.loadingData = false;\n              setIsLoading(false);\n              _context6.next = 47;\n              break;\n\n            case 21:\n              console.log('------->Pagination detected, pulling page', page); // Ensures we get the latest so beat race conditions and avoid double pulls.\n\n              currMetadataLoaded = false;\n              setMetadataLoaded(function (loaded) {\n                currMetadataLoaded = loaded;\n                return loaded;\n              });\n\n              if (!(userTokenAccounts && userTokenAccounts.length && !currMetadataLoaded)) {\n                _context6.next = 30;\n                break;\n              }\n\n              console.log('--------->User metadata loading now.');\n              setMetadataLoaded(true);\n              _context6.next = 29;\n              return loadAccounts_1.pullYourMetadata(connection, userTokenAccounts, nextState);\n\n            case 29:\n              nextState = _context6.sent;\n\n            case 30:\n              auction = window.location.href.match(/#\\/auction\\/(\\w+)/);\n              billing = window.location.href.match(/#\\/auction\\/(\\w+)\\/billing/);\n\n              if (!(auction && page == 0)) {\n                _context6.next = 41;\n                break;\n              }\n\n              console.log('---------->Loading auction page on initial load, pulling sub accounts');\n              _context6.next = 36;\n              return _1.pullAuctionSubaccounts(connection, auction[1], nextState);\n\n            case 36:\n              nextState = _context6.sent;\n\n              if (!billing) {\n                _context6.next = 41;\n                break;\n              }\n\n              console.log('-----> Pulling all payout tickets');\n              _context6.next = 41;\n              return _1.pullPayoutTickets(connection, nextState);\n\n            case 41:\n              setLastLength(function (last) {\n                currLastLength = last;\n                return last;\n              });\n\n              if (nextState.storeIndexer.length != currLastLength) {\n                setPage(function (page) {\n                  return page + 1;\n                });\n              }\n\n              setLastLength(nextState.storeIndexer.length); //@ts-ignore\n\n              window.loadingData = false;\n              setIsLoading(false);\n              setState(nextState);\n\n            case 47:\n              _context6.next = 64;\n              break;\n\n            case 49:\n              console.log('------->No pagination detected');\n\n              if (loadAccounts_1.USE_SPEED_RUN) {\n                _context6.next = 56;\n                break;\n              }\n\n              _context6.next = 53;\n              return loadAccounts_1.loadAccounts(connection);\n\n            case 53:\n              _context6.t0 = _context6.sent;\n              _context6.next = 59;\n              break;\n\n            case 56:\n              _context6.next = 58;\n              return loadAccounts_1.limitedLoadAccounts(connection);\n\n            case 58:\n              _context6.t0 = _context6.sent;\n\n            case 59:\n              nextState = _context6.t0;\n              console.log('------->Query finished');\n              setState(nextState); //@ts-ignore\n\n              window.loadingData = false;\n              setIsLoading(false);\n\n            case 64:\n              console.log('------->set finished');\n              _context6.next = 67;\n              return updateMints(nextState.metadataByMint);\n\n            case 67:\n              if (!(auctionAddress && bidderAddress)) {\n                _context6.next = 70;\n                break;\n              }\n\n              auctionBidderKey = auctionAddress + '-' + bidderAddress;\n              return _context6.abrupt(\"return\", [nextState.auctions[auctionAddress], nextState.bidderPotsByAuctionAndBidder[auctionBidderKey], nextState.bidderMetadataByAuctionAndBidder[auctionBidderKey]]);\n\n            case 70:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _update.apply(this, arguments);\n  }\n\n  react_1.useEffect(function () {\n    //@ts-ignore\n    if (window.loadingData) {\n      console.log('currently another update is running, so queue for 3s...');\n      var interval = setInterval(function () {\n        //@ts-ignore\n        if (window.loadingData) {\n          console.log('not running queued update right now, still loading');\n        } else {\n          console.log('running queued update');\n          update(undefined, undefined, userAccounts);\n          clearInterval(interval);\n        }\n      }, 3000);\n    } else {\n      console.log('no update is running, updating.');\n      update(undefined, undefined, userAccounts);\n    }\n  }, [connection, setState, updateMints, storeAddress, isReady, page, userAccounts.length > 0]);\n  react_1.useEffect(function () {\n    if (isLoading) {\n      return;\n    }\n\n    return subscribeAccountsChange_1.subscribeAccountsChange(connection, function () {\n      return state;\n    }, setState);\n  }, [connection, setState, isLoading, state]); // TODO: fetch names dynamically\n  // TODO: get names for creators\n  // useEffect(() => {\n  //   (async () => {\n  //     const twitterHandles = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\n  //      filters: [\n  //        {\n  //           dataSize: TWITTER_ACCOUNT_LENGTH,\n  //        },\n  //        {\n  //          memcmp: {\n  //           offset: VERIFICATION_AUTHORITY_OFFSET,\n  //           bytes: TWITTER_VERIFICATION_AUTHORITY.toBase58()\n  //          }\n  //        }\n  //      ]\n  //     });\n  //     const handles = twitterHandles.map(t => {\n  //       const owner = new PublicKey(t.account.data.slice(32, 64));\n  //       const name = t.account.data.slice(96, 114).toString();\n  //     });\n  //     console.log(handles);\n  //   })();\n  // }, [whitelistedCreatorsByCreator]);\n\n  return react_1.default.createElement(MetaContext.Provider, {\n    value: _objectSpread(_objectSpread({}, state), {}, {\n      // @ts-ignore\n      update: update,\n      pullAuctionPage: pullAuctionPage,\n      pullAllMetadata: pullAllMetadata,\n      pullBillingPage: pullBillingPage,\n      pullAllSiteData: pullAllSiteData,\n      isLoading: isLoading\n    })\n  }, children);\n}\n\nexports.MetaProvider = MetaProvider;\n\nvar useMeta = function useMeta() {\n  var context = react_1.useContext(MetaContext);\n  return context;\n};\n\nexports.useMeta = useMeta;","map":{"version":3,"sources":["../../../../src/contexts/meta/meta.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.useMeta = exports.MetaProvider = void 0;\r\nconst react_1 = __importStar(require(\"react\"));\r\nconst queryExtendedMetadata_1 = require(\"./queryExtendedMetadata\");\r\nconst subscribeAccountsChange_1 = require(\"./subscribeAccountsChange\");\r\nconst getEmptyMetaState_1 = require(\"./getEmptyMetaState\");\r\nconst loadAccounts_1 = require(\"./loadAccounts\");\r\nconst connection_1 = require(\"../connection\");\r\nconst store_1 = require(\"../store\");\r\nconst actions_1 = require(\"../../actions\");\r\nconst _1 = require(\".\");\r\nconst __1 = require(\"../..\");\r\nconst MetaContext = react_1.default.createContext({\r\n    ...getEmptyMetaState_1.getEmptyMetaState(),\r\n    isLoading: false,\r\n    // @ts-ignore\r\n    update: () => [actions_1.AuctionData, actions_1.BidderMetadata, actions_1.BidderPot],\r\n});\r\nfunction MetaProvider({ children = null }) {\r\n    const connection = connection_1.useConnection();\r\n    const { isReady, storeAddress } = store_1.useStore();\r\n    const [state, setState] = react_1.useState(getEmptyMetaState_1.getEmptyMetaState());\r\n    const [page, setPage] = react_1.useState(0);\r\n    const [metadataLoaded, setMetadataLoaded] = react_1.useState(false);\r\n    const [lastLength, setLastLength] = react_1.useState(0);\r\n    const { userAccounts } = __1.useUserAccounts();\r\n    const [isLoading, setIsLoading] = react_1.useState(true);\r\n    const updateMints = react_1.useCallback(async (metadataByMint) => {\r\n        try {\r\n            const { metadata, mintToMetadata } = await queryExtendedMetadata_1.queryExtendedMetadata(connection, metadataByMint);\r\n            setState(current => ({\r\n                ...current,\r\n                metadata,\r\n                metadataByMint: mintToMetadata,\r\n            }));\r\n        }\r\n        catch (er) {\r\n            console.error(er);\r\n        }\r\n    }, [setState]);\r\n    async function pullAllMetadata() {\r\n        if (isLoading)\r\n            return false;\r\n        if (!storeAddress) {\r\n            if (isReady) {\r\n                setIsLoading(false);\r\n            }\r\n            return;\r\n        }\r\n        else if (!state.store) {\r\n            setIsLoading(true);\r\n        }\r\n        setIsLoading(true);\r\n        const nextState = await _1.pullStoreMetadata(connection, state);\r\n        setIsLoading(false);\r\n        setState(nextState);\r\n        await updateMints(nextState.metadataByMint);\r\n        return [];\r\n    }\r\n    async function pullBillingPage(auctionAddress) {\r\n        if (isLoading)\r\n            return false;\r\n        if (!storeAddress) {\r\n            if (isReady) {\r\n                setIsLoading(false);\r\n            }\r\n            return;\r\n        }\r\n        else if (!state.store) {\r\n            setIsLoading(true);\r\n        }\r\n        const nextState = await _1.pullAuctionSubaccounts(connection, auctionAddress, state);\r\n        console.log('-----> Pulling all payout tickets');\r\n        await _1.pullPayoutTickets(connection, nextState);\r\n        setState(nextState);\r\n        await updateMints(nextState.metadataByMint);\r\n        return [];\r\n    }\r\n    async function pullAuctionPage(auctionAddress) {\r\n        if (isLoading)\r\n            return state;\r\n        if (!storeAddress) {\r\n            if (isReady) {\r\n                setIsLoading(false);\r\n            }\r\n            return state;\r\n        }\r\n        else if (!state.store) {\r\n            setIsLoading(true);\r\n        }\r\n        const nextState = await _1.pullAuctionSubaccounts(connection, auctionAddress, state);\r\n        setState(nextState);\r\n        await updateMints(nextState.metadataByMint);\r\n        return nextState;\r\n    }\r\n    async function pullAllSiteData() {\r\n        if (isLoading)\r\n            return state;\r\n        if (!storeAddress) {\r\n            if (isReady) {\r\n                setIsLoading(false);\r\n            }\r\n            return state;\r\n        }\r\n        else if (!state.store) {\r\n            setIsLoading(true);\r\n        }\r\n        console.log('------->Query started');\r\n        const nextState = await loadAccounts_1.loadAccounts(connection);\r\n        console.log('------->Query finished');\r\n        setState(nextState);\r\n        await updateMints(nextState.metadataByMint);\r\n        return;\r\n    }\r\n    async function update(auctionAddress, bidderAddress, userTokenAccounts) {\r\n        if (!storeAddress) {\r\n            if (isReady) {\r\n                //@ts-ignore\r\n                window.loadingData = false;\r\n                setIsLoading(false);\r\n            }\r\n            return;\r\n        }\r\n        else if (!state.store) {\r\n            //@ts-ignore\r\n            window.loadingData = true;\r\n            setIsLoading(true);\r\n        }\r\n        console.log('-----> Query started');\r\n        let nextState = await _1.pullPage(connection, page, state);\r\n        if (nextState.storeIndexer.length) {\r\n            if (loadAccounts_1.USE_SPEED_RUN) {\r\n                nextState = await loadAccounts_1.limitedLoadAccounts(connection);\r\n                console.log('------->Query finished');\r\n                setState(nextState);\r\n                //@ts-ignore\r\n                window.loadingData = false;\r\n                setIsLoading(false);\r\n            }\r\n            else {\r\n                console.log('------->Pagination detected, pulling page', page);\r\n                // Ensures we get the latest so beat race conditions and avoid double pulls.\r\n                let currMetadataLoaded = false;\r\n                setMetadataLoaded(loaded => {\r\n                    currMetadataLoaded = loaded;\r\n                    return loaded;\r\n                });\r\n                if (userTokenAccounts &&\r\n                    userTokenAccounts.length &&\r\n                    !currMetadataLoaded) {\r\n                    console.log('--------->User metadata loading now.');\r\n                    setMetadataLoaded(true);\r\n                    nextState = await loadAccounts_1.pullYourMetadata(connection, userTokenAccounts, nextState);\r\n                }\r\n                const auction = window.location.href.match(/#\\/auction\\/(\\w+)/);\r\n                const billing = window.location.href.match(/#\\/auction\\/(\\w+)\\/billing/);\r\n                if (auction && page == 0) {\r\n                    console.log('---------->Loading auction page on initial load, pulling sub accounts');\r\n                    nextState = await _1.pullAuctionSubaccounts(connection, auction[1], nextState);\r\n                    if (billing) {\r\n                        console.log('-----> Pulling all payout tickets');\r\n                        await _1.pullPayoutTickets(connection, nextState);\r\n                    }\r\n                }\r\n                let currLastLength;\r\n                setLastLength(last => {\r\n                    currLastLength = last;\r\n                    return last;\r\n                });\r\n                if (nextState.storeIndexer.length != currLastLength) {\r\n                    setPage(page => page + 1);\r\n                }\r\n                setLastLength(nextState.storeIndexer.length);\r\n                //@ts-ignore\r\n                window.loadingData = false;\r\n                setIsLoading(false);\r\n                setState(nextState);\r\n            }\r\n        }\r\n        else {\r\n            console.log('------->No pagination detected');\r\n            nextState = !loadAccounts_1.USE_SPEED_RUN\r\n                ? await loadAccounts_1.loadAccounts(connection)\r\n                : await loadAccounts_1.limitedLoadAccounts(connection);\r\n            console.log('------->Query finished');\r\n            setState(nextState);\r\n            //@ts-ignore\r\n            window.loadingData = false;\r\n            setIsLoading(false);\r\n        }\r\n        console.log('------->set finished');\r\n        await updateMints(nextState.metadataByMint);\r\n        if (auctionAddress && bidderAddress) {\r\n            const auctionBidderKey = auctionAddress + '-' + bidderAddress;\r\n            return [\r\n                nextState.auctions[auctionAddress],\r\n                nextState.bidderPotsByAuctionAndBidder[auctionBidderKey],\r\n                nextState.bidderMetadataByAuctionAndBidder[auctionBidderKey],\r\n            ];\r\n        }\r\n    }\r\n    react_1.useEffect(() => {\r\n        //@ts-ignore\r\n        if (window.loadingData) {\r\n            console.log('currently another update is running, so queue for 3s...');\r\n            const interval = setInterval(() => {\r\n                //@ts-ignore\r\n                if (window.loadingData) {\r\n                    console.log('not running queued update right now, still loading');\r\n                }\r\n                else {\r\n                    console.log('running queued update');\r\n                    update(undefined, undefined, userAccounts);\r\n                    clearInterval(interval);\r\n                }\r\n            }, 3000);\r\n        }\r\n        else {\r\n            console.log('no update is running, updating.');\r\n            update(undefined, undefined, userAccounts);\r\n        }\r\n    }, [\r\n        connection,\r\n        setState,\r\n        updateMints,\r\n        storeAddress,\r\n        isReady,\r\n        page,\r\n        userAccounts.length > 0,\r\n    ]);\r\n    react_1.useEffect(() => {\r\n        if (isLoading) {\r\n            return;\r\n        }\r\n        return subscribeAccountsChange_1.subscribeAccountsChange(connection, () => state, setState);\r\n    }, [connection, setState, isLoading, state]);\r\n    // TODO: fetch names dynamically\r\n    // TODO: get names for creators\r\n    // useEffect(() => {\r\n    //   (async () => {\r\n    //     const twitterHandles = await connection.getProgramAccounts(NAME_PROGRAM_ID, {\r\n    //      filters: [\r\n    //        {\r\n    //           dataSize: TWITTER_ACCOUNT_LENGTH,\r\n    //        },\r\n    //        {\r\n    //          memcmp: {\r\n    //           offset: VERIFICATION_AUTHORITY_OFFSET,\r\n    //           bytes: TWITTER_VERIFICATION_AUTHORITY.toBase58()\r\n    //          }\r\n    //        }\r\n    //      ]\r\n    //     });\r\n    //     const handles = twitterHandles.map(t => {\r\n    //       const owner = new PublicKey(t.account.data.slice(32, 64));\r\n    //       const name = t.account.data.slice(96, 114).toString();\r\n    //     });\r\n    //     console.log(handles);\r\n    //   })();\r\n    // }, [whitelistedCreatorsByCreator]);\r\n    return (react_1.default.createElement(MetaContext.Provider, { value: {\r\n            ...state,\r\n            // @ts-ignore\r\n            update,\r\n            pullAuctionPage,\r\n            pullAllMetadata,\r\n            pullBillingPage,\r\n            pullAllSiteData,\r\n            isLoading,\r\n        } }, children));\r\n}\r\nexports.MetaProvider = MetaProvider;\r\nconst useMeta = () => {\r\n    const context = react_1.useContext(MetaContext);\r\n    return context;\r\n};\r\nexports.useMeta = useMeta;\r\n//# sourceMappingURL=meta.js.map"]},"metadata":{},"sourceType":"script"}